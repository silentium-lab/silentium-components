{"version":3,"file":"silentium-components.mjs","sources":["../src/behaviors/Dirty.ts","../src/behaviors/Loading.ts","../src/behaviors/Path.ts","../src/behaviors/Deadline.ts","../src/behaviors/Tick.ts","../src/behaviors/Sync.ts","../src/behaviors/Deferred.ts","../src/behaviors/Branch.ts","../src/behaviors/Memo.ts","../src/behaviors/Lock.ts","../src/behaviors/Shot.ts","../src/behaviors/OnlyChanged.ts","../src/structures/HashTable.ts","../src/structures/RecordOf.ts","../src/strings/Concatenated.ts","../src/system/RegexpMatched.ts","../src/system/RegexpReplaced.ts","../src/system/RegexpMatch.ts","../src/system/Set.ts","../src/navigation/Router.ts","../src/boolean/And.ts","../src/boolean/Or.ts","../src/boolean/Not.ts","../src/boolean/Bool.ts","../src/formats/FromJson.ts","../src/formats/ToJson.ts","../src/lists/First.ts"],"sourcesContent":["import { All, Applied, From, Late, TheInformation, TheOwner } from \"silentium\";\n\n/**\n * Takes source and remember it first value\n * returns new record, what will contain only fields what was changed\n * https://silentium-lab.github.io/silentium-components/#/behaviors/dirty\n */\nexport class Dirty<T> extends TheInformation<T> {\n  private comparingSrc = new Late<T>();\n\n  public constructor(\n    private baseEntitySource: TheInformation<T>,\n    private alwaysKeep: string[] = [],\n    private excludeKeys: string[] = [],\n  ) {\n    super([baseEntitySource]);\n  }\n\n  public value(o: TheOwner<T>): this {\n    const comparingDetached = new Applied(this.comparingSrc, (value) =>\n      JSON.parse(JSON.stringify(value)),\n    );\n\n    const allSrc = new All(comparingDetached, this.baseEntitySource).value(\n      new From(([comparing, base]) => {\n        if (!comparing) {\n          return;\n        }\n\n        o.give(\n          Object.fromEntries(\n            Object.entries(comparing).filter(([key, value]) => {\n              if (this.alwaysKeep.includes(key)) {\n                return true;\n              }\n              if (this.excludeKeys.includes(key)) {\n                return false;\n              }\n              return value !== (base as any)[key];\n            }),\n          ) as T,\n        );\n      }),\n    );\n    this.addDep(allSrc);\n\n    return this;\n  }\n\n  public owner() {\n    return this.comparingSrc.owner();\n  }\n}\n","import { From, TheInformation, TheOwner } from \"silentium\";\n\n/**\n * Representation of loading process\n * first informatin source begins loading\n * second information source stops loading\n * https://silentium-lab.github.io/silentium-components/#/behaviors/loading\n */\nexport class Loading extends TheInformation<boolean> {\n  public constructor(\n    private loadingStartSrc: TheInformation<unknown>,\n    private loadingFinishSrc: TheInformation<unknown>,\n  ) {\n    super(loadingFinishSrc, loadingStartSrc);\n  }\n\n  public value(o: TheOwner<boolean>): this {\n    this.loadingStartSrc.value(\n      new From(() => {\n        o.give(true);\n      }),\n    );\n\n    this.loadingFinishSrc.value(\n      new From(() => {\n        o.give(false);\n      }),\n    );\n\n    return this;\n  }\n}\n","import { All, From, TheInformation, TheOwner } from \"silentium\";\n\n/**\n * Return source of record path\n * https://silentium-lab.github.io/silentium-components/#/behaviors/path\n */\nexport class Path<\n  R,\n  T extends Record<string, unknown> | Array<unknown> = any,\n  K extends string = any,\n> extends TheInformation<R> {\n  public constructor(\n    private baseSrc: TheInformation<T>,\n    private keySrc: TheInformation<K>,\n  ) {\n    super(baseSrc, keySrc);\n  }\n\n  public value(o: TheOwner<R>): this {\n    const allSrc = new All(this.baseSrc, this.keySrc).value(\n      new From(([base, key]) => {\n        const keyChunks = key.split(\".\");\n        let value: unknown = base;\n        keyChunks.forEach((keyChunk) => {\n          value = (value as Record<string, unknown>)[keyChunk];\n        });\n\n        if (value !== undefined && value !== base) {\n          o.give(value as R);\n        }\n      }),\n    );\n    this.addDep(allSrc);\n    return this;\n  }\n}\n","import { Filtered, From, Shared, TheInformation, TheOwner } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/path\n */\nexport class Deadline<T> extends TheInformation<T> {\n  public constructor(\n    private error: TheOwner<Error>,\n    private baseSrc: TheInformation<T>,\n    private timeoutSrc: TheInformation<number>,\n  ) {\n    super([error, baseSrc, timeoutSrc]);\n  }\n\n  public value(o: TheOwner<T>) {\n    let timerHead: unknown = null;\n\n    const s = new Shared(this.baseSrc, true);\n    this.addDep(s);\n\n    this.timeoutSrc.value(\n      new From((timeout) => {\n        if (timerHead) {\n          clearTimeout(timerHead as number);\n        }\n        let timeoutReached = false;\n\n        timerHead = setTimeout(() => {\n          if (timeoutReached) {\n            return;\n          }\n          timeoutReached = true;\n          this.error.give(new Error(\"Timeout reached in Deadline class\"));\n        }, timeout);\n\n        const f = new Filtered(s, () => !timeoutReached);\n        this.addDep(f);\n        f.value(o);\n\n        s.value(\n          new From(() => {\n            timeoutReached = true;\n          }),\n        );\n      }),\n    );\n\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"silentium\";\n\n/**\n * Accumulates the last value of the source and returns one result once per tick\n * https://silentium-lab.github.io/silentium-components/#/behaviors/tick\n */\nexport class Tick<T> extends TheInformation<T> {\n  public constructor(private baseSrc: TheInformation<T>) {\n    super(baseSrc);\n  }\n\n  public value(o: TheOwner<T>): this {\n    let microtaskScheduled = false;\n    let lastValue: T | null = null;\n\n    const scheduleMicrotask = () => {\n      microtaskScheduled = true;\n      queueMicrotask(() => {\n        microtaskScheduled = false;\n        if (lastValue !== null) {\n          o.give(lastValue);\n          lastValue = null;\n        }\n      });\n    };\n\n    this.baseSrc.value(\n      new From((v) => {\n        lastValue = v;\n        if (!microtaskScheduled) {\n          scheduleMicrotask();\n        }\n      }),\n    );\n\n    return this;\n  }\n}\n","import { From, isFilled, TheInformation, TheOwner } from \"silentium\";\n\nexport class Sync<T> extends TheInformation<T> {\n  private theValue: T | undefined;\n  private isInit = false;\n\n  public constructor(private baseSrc: TheInformation<T>) {\n    super(baseSrc);\n  }\n\n  public value(o: TheOwner<T>): this {\n    this.baseSrc.value(o);\n    return this;\n  }\n\n  public valueExisted() {\n    this.initOwner();\n    return isFilled(this.theValue);\n  }\n\n  public valueSync(): T {\n    this.initOwner();\n\n    if (!isFilled(this.theValue)) {\n      throw new Error(\"no value in sync\");\n    }\n\n    return this.theValue;\n  }\n\n  public initOwner() {\n    if (!this.isInit) {\n      this.isInit = true;\n      this.value(\n        new From((v) => {\n          this.theValue = v;\n        }),\n      );\n    }\n    return this;\n  }\n}\n","import { From, isFilled, TheInformation, TheOwner } from \"silentium\";\nimport { Sync } from \"./Sync\";\n\n/**\n * Defer one source after another, gives values of baseSrc only once when triggerSrc responds\n * https://silentium-lab.github.io/silentium-components/#/behaviors/deferred\n */\nexport class Deferred<T> extends TheInformation<T> {\n  public constructor(\n    private baseSrc: TheInformation<T>,\n    private triggerSrc: TheInformation<unknown>,\n  ) {\n    super();\n  }\n\n  public value(o: TheOwner<T>): this {\n    const baseSync = new Sync(this.baseSrc).initOwner();\n    this.triggerSrc.value(\n      new From(() => {\n        if (isFilled(baseSync.valueSync())) {\n          o.give(baseSync.valueSync());\n        }\n      }),\n    );\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"silentium\";\nimport { Sync } from \"./Sync\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/branch\n */\nexport class Branch<Then, Else> extends TheInformation<Then | Else> {\n  public constructor(\n    private conditionSrc: TheInformation<boolean>,\n    private leftSrc: TheInformation<Then>,\n    private rightSrc?: TheInformation<Else>,\n  ) {\n    super([conditionSrc, leftSrc, rightSrc]);\n  }\n  public value(o: TheOwner<Then | Else>): this {\n    const leftSync = new Sync(this.leftSrc).initOwner();\n    let rightSync: Sync<Else>;\n\n    if (this.rightSrc !== undefined) {\n      rightSync = new Sync(this.rightSrc).initOwner();\n    }\n\n    this.conditionSrc.value(\n      new From((v) => {\n        if (v) {\n          o.give(leftSync.valueSync());\n        } else if (rightSync) {\n          o.give(rightSync.valueSync());\n        }\n      }),\n    );\n\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"silentium\";\n\n/**\n * Didn't respond if new value of baseSrc equals to old value\n * https://silentium-lab.github.io/silentium-components/#/behaviors/memo\n */\nexport class Memo<T> extends TheInformation<T> {\n  public constructor(private baseSrc: TheInformation<T>) {\n    super(baseSrc);\n  }\n\n  public value(o: TheOwner<T>): this {\n    let lastValue: T | null = null;\n\n    this.baseSrc.value(\n      new From((v) => {\n        if (v !== lastValue) {\n          o.give(v);\n          lastValue = v;\n        }\n      }),\n    );\n\n    return this;\n  }\n}\n","import { Filtered, From, TheInformation, TheOwner } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/lock\n */\nexport class Lock<T> extends TheInformation<T> {\n  public constructor(\n    private baseSrc: TheInformation<T>,\n    private lockSrc: TheInformation<boolean>,\n  ) {\n    super(baseSrc, lockSrc);\n  }\n\n  public value(o: TheOwner<T>): this {\n    let locked = false;\n    this.lockSrc.value(\n      new From((newLock) => {\n        locked = newLock;\n      }),\n    );\n    const i = new Filtered(this.baseSrc, () => !locked);\n    this.addDep(i);\n    i.value(o);\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"silentium\";\nimport { Sync } from \"./Sync\";\n\n/**\n * Helps to represent only last fresh value of some source, refreshing controls by shotSrc\n * https://silentium-lab.github.io/silentium-components/#/behaviors/shot\n */\nexport class Shot<T> extends TheInformation<T> {\n  public constructor(\n    private targetSrc: TheInformation<T>,\n    private triggerSrc: TheInformation,\n  ) {\n    super(targetSrc, triggerSrc);\n  }\n\n  public value(o: TheOwner<T>): this {\n    const targetSync = new Sync(this.targetSrc);\n    targetSync.initOwner();\n\n    this.triggerSrc.value(\n      new From(() => {\n        if (targetSync.valueExisted()) {\n          o.give(targetSync.valueSync());\n        }\n      }),\n    );\n\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"silentium\";\n\n/**\n * Represents source what was changed at least once\n * https://silentium-lab.github.io/silentium-components/#/behaviors/only-changed\n */\nexport class OnlyChanged<T> extends TheInformation<T> {\n  public constructor(private baseSrc: TheInformation<T>) {\n    super(baseSrc);\n  }\n\n  public value(o: TheOwner<T>): this {\n    let firstValue = false;\n\n    this.baseSrc.value(\n      new From((v) => {\n        if (firstValue === false) {\n          firstValue = true;\n        } else {\n          o.give(v);\n        }\n      }),\n    );\n\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/structures/hash-table\n */\nexport class HashTable<T> extends TheInformation<T> {\n  public constructor(private baseSrc: TheInformation<[string, unknown]>) {\n    super(baseSrc);\n  }\n\n  public value(o: TheOwner<T>): this {\n    const record: Record<string, unknown> = {};\n\n    this.baseSrc.value(\n      new From(([key, value]) => {\n        record[key] = value;\n        o.give(record as T);\n      }),\n    );\n\n    return this;\n  }\n}\n","import { All, From, TheInformation, TheOwner } from \"silentium\";\n\ntype UnInformation<T> = T extends TheInformation<infer U> ? U : never;\n\n/**\n * Returns record of data from record of sources\n * https://silentium-lab.github.io/silentium-components/#/structures/record\n */\nexport class RecordOf<T extends TheInformation> extends TheInformation<\n  Record<string, UnInformation<T>>\n> {\n  public constructor(private recordSrc: Record<string, T>) {\n    super(...Object.values(recordSrc));\n  }\n\n  public value(o: TheOwner<Record<string, UnInformation<T>>>): this {\n    const keys = Object.keys(this.recordSrc);\n    new All(...Object.values(this.recordSrc)).value(\n      new From((entries) => {\n        const record: Record<string, any> = {};\n        entries.forEach((entry, index) => {\n          record[keys[index]] = entry;\n        });\n        o.give(record);\n      }),\n    );\n    return this;\n  }\n}\n","import { All, From, Of, TheInformation, TheOwner } from \"silentium\";\n\n/**\n * Join sources of strings to one source\n * https://silentium-lab.github.io/silentium-components/#/string/concatenated\n */\nexport class Concatenated extends TheInformation<string> {\n  public constructor(\n    private sources: TheInformation<string>[],\n    private joinPartSrc: TheInformation<string> = new Of(\"\"),\n  ) {\n    super(...sources, joinPartSrc);\n  }\n\n  public value(o: TheOwner<string>): this {\n    new All(this.joinPartSrc, ...this.sources).value(\n      new From(([joinPart, ...strings]) => {\n        o.give(strings.join(joinPart));\n      }),\n    );\n    return this;\n  }\n}\n","import { All, From, Of, TheInformation, TheOwner } from \"silentium\";\n\n/**\n * Boolean source what checks what string matches pattern\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-matched\n */\nexport class RegexpMatched extends TheInformation<boolean> {\n  public constructor(\n    private patternSrc: TheInformation<string>,\n    private valueSrc: TheInformation<string>,\n    private flagsSrc: TheInformation<string> = new Of(\"\"),\n  ) {\n    super(patternSrc, valueSrc, flagsSrc);\n  }\n\n  public value(o: TheOwner<boolean>): this {\n    new All(this.patternSrc, this.valueSrc, this.flagsSrc).value(\n      new From(([pattern, value, flags]) => {\n        o.give(new RegExp(pattern, flags).test(value));\n      }),\n    );\n    return this;\n  }\n}\n","import { All, From, Of, TheInformation, TheOwner } from \"silentium\";\n\n/**\n * Returns string replaced by regular expression pattern\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-replaced\n */\nexport class RegexpReplaced extends TheInformation<string> {\n  public constructor(\n    private valueSrc: TheInformation<string>,\n    private patternSrc: TheInformation<string>,\n    private replaceValueSrc: TheInformation<string>,\n    private flagsSrc: TheInformation<string> = new Of(\"\"),\n  ) {\n    super(valueSrc, patternSrc, replaceValueSrc, flagsSrc);\n  }\n\n  public value(o: TheOwner<string>): this {\n    new All(\n      this.patternSrc,\n      this.valueSrc,\n      this.replaceValueSrc,\n      this.flagsSrc,\n    ).value(\n      new From(([pattern, value, replaceValue, flags]) => {\n        o.give(String(value).replace(new RegExp(pattern, flags), replaceValue));\n      }),\n    );\n    return this;\n  }\n}\n","import { All, From, Of, TheInformation, TheOwner } from \"silentium\";\n\n/**\n * First match of regexp\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-matched\n */\nexport class RegexpMatch extends TheInformation<string[]> {\n  public constructor(\n    private patternSrc: TheInformation<string>,\n    private valueSrc: TheInformation<string>,\n    private flagsSrc: TheInformation<string> = new Of(\"\"),\n  ) {\n    super(patternSrc, valueSrc, flagsSrc);\n  }\n\n  public value(o: TheOwner<string[]>): this {\n    new All(this.patternSrc, this.valueSrc, this.flagsSrc).value(\n      new From(([pattern, value, flags]) => {\n        const result = new RegExp(pattern, flags).exec(value);\n        o.give(result ?? []);\n      }),\n    );\n    return this;\n  }\n}\n","import { All, From, TheInformation, TheOwner } from \"silentium\";\n\n/**\n * Ability to mutate some object, helpful when integrate to procedure systems\n * https://silentium-lab.github.io/silentium-components/#/system/set\n */\nexport class Set<T extends Record<string, unknown>> extends TheInformation<T> {\n  public constructor(\n    private baseSrc: TheInformation<T>,\n    private keySrc: TheInformation<string>,\n    private valueSrc: TheInformation<unknown>,\n  ) {\n    super(baseSrc, keySrc, valueSrc);\n  }\n\n  public value(o: TheOwner<T>): this {\n    new All(this.baseSrc, this.keySrc, this.valueSrc).value(\n      new From(([base, key, value]) => {\n        (base as Record<string, unknown>)[key] = value;\n        o.give(base);\n      }),\n    );\n    return this;\n  }\n}\n","import { Any, Chain, From, Of, TheInformation, TheOwner } from \"silentium\";\nimport { Branch } from \"../behaviors\";\nimport { RegexpMatched } from \"../system\";\n\nexport interface Route<T> {\n  pattern: string;\n  patternFlags?: string;\n  template: T | TheInformation<T>;\n}\n\n/**\n * Router component what will return template if url matches pattern\n * https://silentium-lab.github.io/silentium-components/#/navigation/router\n */\nexport class Router<T = \"string\"> extends TheInformation<T> {\n  public constructor(\n    private urlSrc: TheInformation<string>,\n    private routesSrc: TheInformation<Route<T>[]>,\n    private defaultSrc: TheInformation<T>,\n  ) {\n    super(urlSrc, routesSrc, defaultSrc);\n  }\n\n  public value(o: TheOwner<T>): this {\n    this.routesSrc.value(\n      new From((routes) => {\n        new Any(\n          new Chain(this.urlSrc, this.defaultSrc),\n          ...routes.map((r) => {\n            return new Branch(\n              new RegexpMatched(\n                new Of(r.pattern),\n                this.urlSrc,\n                r.patternFlags ? new Of(r.patternFlags) : undefined,\n              ),\n              (r.template instanceof TheInformation\n                ? r.template\n                : new Of(r.template)) as TheInformation,\n            );\n          }),\n        ).value(o as TheOwner);\n      }),\n    );\n    return this;\n  }\n}\n","import { All, From, TheInformation, TheOwner } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/boolean/and\n */\nexport class And extends TheInformation<boolean> {\n  public constructor(\n    private oneSrc: TheInformation<boolean>,\n    private twoSrc: TheInformation<boolean>,\n  ) {\n    super(oneSrc, twoSrc);\n  }\n\n  public value(o: TheOwner<boolean>): this {\n    new All(this.oneSrc, this.twoSrc).value(\n      new From(([one, two]) => {\n        o.give(one && two);\n      }),\n    );\n    return this;\n  }\n}\n","import { All, From, TheInformation, TheOwner } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/boolean/or\n */\nexport class Or extends TheInformation<boolean> {\n  public constructor(\n    private oneSrc: TheInformation<boolean>,\n    private twoSrc: TheInformation<boolean>,\n  ) {\n    super(oneSrc, twoSrc);\n  }\n\n  public value(o: TheOwner<boolean>): this {\n    new All(this.oneSrc, this.twoSrc).value(\n      new From(([one, two]) => {\n        o.give(one || two);\n      }),\n    );\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/boolean/not\n */\nexport class Not extends TheInformation<boolean> {\n  public constructor(private baseSrc: TheInformation<boolean>) {\n    super(baseSrc);\n  }\n\n  public value(o: TheOwner<boolean>): this {\n    this.baseSrc.value(\n      new From((v) => {\n        o.give(!v);\n      }),\n    );\n    return this;\n  }\n}\n","import { Applied, TheInformation, TheOwner } from \"silentium\";\n\n/**\n * Convert any source to boolean source\n * https://silentium-lab.github.io/silentium-components/#/boolean/bool\n */\nexport class Bool extends TheInformation<boolean> {\n  public constructor(private baseSrc: TheInformation) {\n    super(baseSrc);\n  }\n\n  public value(o: TheOwner<boolean>): this {\n    new Applied(this.baseSrc, Boolean).value(o);\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"silentium\";\n\n/**\n * Represents object from json\n */\nexport class FromJson<T> extends TheInformation<T> {\n  public constructor(\n    private jsonSrc: TheInformation<string>,\n    private errorOwner?: TheOwner,\n  ) {\n    super(jsonSrc);\n  }\n\n  public value(o: TheOwner<T>): this {\n    this.jsonSrc.value(\n      new From((json) => {\n        try {\n          o.give(JSON.parse(json));\n        } catch (error) {\n          this.errorOwner?.give(new Error(`Failed to parse JSON: ${error}`));\n        }\n      }),\n    );\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"silentium\";\n\n/**\n * Represents json from object\n */\nexport class ToJson extends TheInformation<string> {\n  public constructor(\n    private dataSrc: TheInformation,\n    private errorOwner?: TheOwner,\n  ) {\n    super(dataSrc);\n  }\n\n  public value(o: TheOwner<string>): this {\n    this.dataSrc.value(\n      new From((data: unknown) => {\n        try {\n          o.give(JSON.stringify(data));\n        } catch {\n          this.errorOwner?.give(new Error(\"Failed to convert to JSON\"));\n        }\n      }),\n    );\n    return this;\n  }\n}\n","import { Applied, TheInformation, TheOwner } from \"silentium\";\n\n/**\n * Represents the first element of an array.\n */\nexport class First<T extends Array<unknown>> extends TheInformation<T[0]> {\n  public constructor(private baseSrc: TheInformation<T>) {\n    super(baseSrc);\n  }\n\n  public value(o: TheOwner<T[0]>): this {\n    new Applied(this.baseSrc, (a) => a[0]).value(o);\n    return this;\n  }\n}\n"],"names":["__publicField"],"mappings":"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"}