{"version":3,"file":"silentium-components.min.mjs","sources":["../src/controls/GroupActiveClass.ts","../src/behaviors/Dirty.ts","../src/behaviors/Loading.ts","../src/behaviors/Path.ts","../src/behaviors/Deadline.ts","../src/behaviors/Tick.ts","../src/structures/HashTable.ts","../src/structures/Record.ts","../src/strings/Concatenated.ts","../src/system/RegexpMatched.ts","../src/navigation/Router.ts","../src/system/RegexpReplaced.ts"],"sourcesContent":["import { patron, sourceAll, SourceType, value } from \"silentium\";\n\n/**\n * Sets activeClass to one element of group\n * and resets activeClass on other group elements\n * suitable for menu active class\n */\nexport const groupActiveClass = (\n  activeClassSrc: SourceType<string>,\n  activeElementSrc: SourceType<HTMLElement>,\n  groupElementsSrc: SourceType<HTMLElement[]>,\n) => {\n  value(\n    sourceAll([activeClassSrc, activeElementSrc, groupElementsSrc]),\n    patron(([activeClass, activeElement, groupElements]) => {\n      groupElements.forEach((el) => {\n        if (el.classList) {\n          el.classList.remove(activeClass);\n        }\n      });\n      activeElement.classList.add(activeClass);\n    }),\n  );\n\n  return groupElementsSrc;\n};\n","import {\n  give,\n  guestCast,\n  GuestType,\n  patronOnce,\n  sourceAll,\n  SourceChangeableType,\n  sourceOf,\n  SourceType,\n  value,\n} from \"silentium\";\n\n/**\n * Takes source and remember it first value\n * returns new record, what will contain only fields what was changed\n * https://silentium-lab.github.io/silentium-components/#/behaviors/dirty\n */\nexport const dirty = <T extends object>(\n  baseEntitySource: SourceType<T>,\n  becomePatronAuto = false,\n  alwaysKeep: string[] = [],\n  excludeKeys: string[] = [],\n): SourceChangeableType<Partial<T>> => {\n  const comparingSrc = sourceOf();\n  const all = sourceAll([comparingSrc, baseEntitySource]);\n\n  const result = {\n    give(value: T) {\n      give(JSON.parse(JSON.stringify(value)), comparingSrc);\n      return result;\n    },\n    value(guest: GuestType<Partial<T>>) {\n      value(\n        all,\n        guestCast(guest, ([comparing, base]) => {\n          if (!comparing) {\n            return;\n          }\n\n          give(\n            Object.fromEntries(\n              Object.entries(comparing).filter(([key, value]) => {\n                if (alwaysKeep.includes(key)) {\n                  return true;\n                }\n                if (excludeKeys.includes(key)) {\n                  return false;\n                }\n                return value !== (base as any)[key];\n              }),\n            ) as T,\n            guest,\n          );\n        }),\n      );\n      return result;\n    },\n  };\n\n  if (becomePatronAuto) {\n    value(baseEntitySource, patronOnce(result));\n  }\n\n  return result;\n};\n","import { patron, sourceOf, SourceType, subSourceMany, value } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/loading\n */\nexport const loading = (\n  loadingStartSource: SourceType<unknown>,\n  loadingFinishSource: SourceType<unknown>,\n) => {\n  const loadingSrc = sourceOf<boolean>();\n  subSourceMany(loadingSrc, [loadingStartSource, loadingFinishSource]);\n\n  value(\n    loadingStartSource,\n    patron(() => {\n      loadingSrc.give(true);\n    }),\n  );\n  value(\n    loadingFinishSource,\n    patron(() => {\n      loadingSrc.give(false);\n    }),\n  );\n\n  return loadingSrc.value;\n};\n","import {\n  give,\n  patron,\n  sourceAll,\n  sourceOf,\n  SourceType,\n  subSourceMany,\n  value,\n} from \"silentium\";\n\n/**\n * Return source of record path\n * https://silentium-lab.github.io/silentium-components/#/behaviors/path\n */\nexport const path = <T extends Record<string, unknown>, K extends string>(\n  baseSrc: SourceType<T>,\n  keySrc: SourceType<K>,\n) => {\n  const pathSrc = sourceOf<T[K]>();\n  subSourceMany(pathSrc, [baseSrc, keySrc]);\n\n  value(\n    sourceAll([baseSrc, keySrc]),\n    patron(([base, key]) => {\n      const keyChunks = key.split(\".\");\n      let value: unknown = base;\n      keyChunks.forEach((keyChunk) => {\n        value = (value as T)[keyChunk];\n      });\n\n      if (value !== undefined && value !== base) {\n        give(value as T[K], pathSrc);\n      }\n    }),\n  );\n\n  return pathSrc.value;\n};\n","import {\n  give,\n  guestCast,\n  GuestType,\n  patronOnce,\n  sourceFiltered,\n  SourceType,\n  value,\n} from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/path\n */\nexport const deadline = <T>(\n  error: GuestType<Error>,\n  baseSrc: SourceType<T>,\n  timeoutSrc: SourceType<number>,\n) => {\n  let timerHead: unknown = null;\n  return (g: GuestType<T>) => {\n    value(\n      timeoutSrc,\n      guestCast(g, (timeout) => {\n        if (timerHead) {\n          clearTimeout(timerHead as number);\n        }\n\n        let timeoutReached = false;\n\n        timerHead = setTimeout(() => {\n          if (timeoutReached) {\n            return;\n          }\n          timeoutReached = true;\n          give(new Error(\"Timeout reached in Deadline class\"), error);\n        }, timeout);\n\n        value(\n          sourceFiltered(baseSrc, () => !timeoutReached),\n          g,\n        );\n\n        value(\n          baseSrc,\n          patronOnce(() => {\n            timeoutReached = true;\n          }),\n        );\n      }),\n    );\n  };\n};\n","import {\n  give,\n  patron,\n  sourceOf,\n  SourceType,\n  subSource,\n  value,\n} from \"silentium\";\n\n/**\n * Accumulates the last value of the source and returns one result once per tick\n * https://silentium-lab.github.io/silentium-components/#/behaviors/tick\n */\nexport const tick = <T>(baseSrc: SourceType<T>) => {\n  const result = sourceOf<T>();\n  subSource(result, baseSrc);\n\n  let microtaskScheduled = false;\n  let lastValue: T | null = null;\n\n  const scheduleMicrotask = () => {\n    microtaskScheduled = true;\n    queueMicrotask(() => {\n      microtaskScheduled = false;\n      if (lastValue !== null) {\n        give(lastValue, result);\n        lastValue = null;\n      }\n    });\n  };\n\n  value(\n    baseSrc,\n    patron((v) => {\n      lastValue = v;\n      if (!microtaskScheduled) {\n        scheduleMicrotask();\n      }\n    }),\n  );\n\n  return result;\n};\n","import { patron, sourceOf, SourceType, subSource, value } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/structures/hash-table\n */\nexport const hashTable = (baseSource: SourceType<[string, unknown]>) => {\n  const result = sourceOf<Record<string, unknown>>({});\n  subSource(result, baseSource);\n\n  value(\n    baseSource,\n    patron(([key, value]) => {\n      result.value((lastRecord) => {\n        lastRecord[key] = value;\n      });\n    }),\n  );\n\n  return result.value;\n};\n","import { give, GuestType, sourceCombined, SourceType } from \"silentium\";\n\n/**\n * Returns record of data from record of sources\n * https://silentium-lab.github.io/silentium-components/#/structures/record\n */\nexport const record = (recordSrc: Record<string, SourceType>) => {\n  const keys = Object.keys(recordSrc);\n  return sourceCombined(...Object.values(recordSrc))(\n    (g: GuestType<Record<string, any>>, ...entries: any[]) => {\n      const record: Record<string, any> = {};\n      entries.forEach((entry, index) => {\n        record[keys[index]] = entry;\n      });\n      give(record, g);\n    },\n  );\n};\n","import { give, GuestType, sourceCombined, SourceType } from \"silentium\";\n\n/**\n * Join sources of strings to one source\n * https://silentium-lab.github.io/silentium-components/#/string/concatenated\n */\nexport const concatenated = (\n  sources: SourceType<string>[],\n  joinPartSrc: SourceType<string> = \"\",\n): SourceType<string> => {\n  const result = sourceCombined(\n    joinPartSrc,\n    ...sources,\n  )((g: GuestType<string>, joinPart, ...strings) => {\n    give(strings.join(joinPart), g);\n  });\n\n  return result;\n};\n","import { give, GuestType, sourceCombined, SourceType } from \"silentium\";\n\n/**\n * Boolean source what checks what string matches pattern\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-matched\n */\nexport const regexpMatched = (\n  patternSrc: SourceType<string>,\n  valueSrc: SourceType<string>,\n  flagsSrc: SourceType<string> = \"\",\n): SourceType<boolean> =>\n  sourceCombined(\n    patternSrc,\n    valueSrc,\n    flagsSrc,\n  )((g: GuestType<boolean>, pattern, value, flags) => {\n    give(new RegExp(pattern, flags).test(value), g);\n  });\n","import {\n  patron,\n  sourceAny,\n  sourceChain,\n  sourceFiltered,\n  sourceOf,\n  SourceType,\n  value,\n} from \"silentium\";\nimport { regexpMatched } from \"../system/RegexpMatched\";\n\nexport interface Route<T> {\n  pattern: string;\n  patternFlags?: string;\n  template: T | SourceType<T>;\n}\n\n/**\n * Router component what will return template if url matches pattern\n * https://silentium-lab.github.io/silentium-components/#/navigation/router\n */\nexport const router = <T = \"string\">(\n  urlSrc: SourceType<string>,\n  routesSrc: SourceType<Route<T>[]>,\n  defaultSrc: SourceType<T>,\n) => {\n  const resultSrc = sourceOf<T>();\n\n  value(\n    routesSrc,\n    patron((routes) => {\n      value(\n        sourceAny([\n          sourceChain(urlSrc, defaultSrc as T),\n          ...routes.map((r) =>\n            sourceChain(\n              sourceFiltered(\n                regexpMatched(r.pattern, urlSrc, r.patternFlags),\n                Boolean,\n              ),\n              r.template,\n            ),\n          ),\n        ]),\n        patron(resultSrc),\n      );\n    }),\n  );\n\n  return resultSrc.value;\n};\n","import { give, GuestType, sourceCombined, SourceType } from \"silentium\";\n\n/**\n * Returns string replaced by regular expression pattern\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-replaced\n */\nexport const regexpReplaced = (\n  valueSrc: SourceType<string>,\n  patternSrc: SourceType<string>,\n  replaceValueSrc: SourceType<string>,\n  flagsSrc: SourceType<string> = \"\",\n): SourceType<string> =>\n  sourceCombined(\n    patternSrc,\n    valueSrc,\n    replaceValueSrc,\n    flagsSrc,\n  )((g: GuestType<string>, pattern, value, replaceValue, flags) => {\n    give(String(value).replace(new RegExp(pattern, flags), replaceValue), g);\n  });\n"],"names":["groupActiveClass","activeClassSrc","activeElementSrc","groupElementsSrc","value","sourceAll","patron","activeClass","activeElement","groupElements","forEach","el","classList","remove","add","dirty","baseEntitySource","becomePatronAuto","alwaysKeep","excludeKeys","comparingSrc","sourceOf","all","result","give","JSON","parse","stringify","guest","guestCast","comparing","base","Object","fromEntries","entries","filter","key","includes","patronOnce","loading","loadingStartSource","loadingFinishSource","loadingSrc","subSourceMany","path","baseSrc","keySrc","pathSrc","keyChunks","split","keyChunk","deadline","error","timeoutSrc","timerHead","g","timeout","clearTimeout","timeoutReached","setTimeout","Error","sourceFiltered","tick","subSource","microtaskScheduled","lastValue","v","queueMicrotask","hashTable","baseSource","lastRecord","record","recordSrc","keys","sourceCombined","values","entry","index","concatenated","sources","joinPartSrc","joinPart","strings","join","regexpMatched","patternSrc","valueSrc","flagsSrc","pattern","flags","RegExp","test","router","urlSrc","routesSrc","defaultSrc","resultSrc","routes","sourceAny","sourceChain","map","r","patternFlags","Boolean","template","regexpReplaced","replaceValueSrc","replaceValue","String","replace"],"mappings":"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"}