{"version":3,"file":"silentium-components.min.mjs","sources":["../src/controls/GroupActiveClass.ts","../src/behaviors/Dirty.ts","../src/behaviors/Loading.ts","../src/behaviors/Path.ts","../src/behaviors/Deadline.ts","../src/behaviors/Tick.ts","../src/behaviors/Fork.ts","../src/behaviors/Deferred.ts","../src/behaviors/Branch.ts","../src/behaviors/Memo.ts","../src/behaviors/Lock.ts","../src/behaviors/Moment.ts","../src/behaviors/Shot.ts","../src/structures/HashTable.ts","../src/structures/Record.ts","../src/strings/Concatenated.ts","../src/system/RegexpMatched.ts","../src/navigation/Router.ts","../src/system/RegexpReplaced.ts","../src/system/RegexpMatch.ts","../src/system/Set.ts","../src/boolean/And.ts","../src/boolean/Or.ts","../src/boolean/Not.ts"],"sourcesContent":["import { patron, sourceAll, SourceType, value } from \"silentium\";\n\n/**\n * Sets activeClass to one element of group\n * and resets activeClass on other group elements\n * suitable for menu active class\n */\nexport const groupActiveClass = (\n  activeClassSrc: SourceType<string>,\n  activeElementSrc: SourceType<HTMLElement>,\n  groupElementsSrc: SourceType<HTMLElement[]>,\n) => {\n  value(\n    sourceAll([activeClassSrc, activeElementSrc, groupElementsSrc]),\n    patron(([activeClass, activeElement, groupElements]) => {\n      groupElements.forEach((el) => {\n        if (el.classList) {\n          el.classList.remove(activeClass);\n        }\n      });\n      activeElement.classList.add(activeClass);\n    }),\n  );\n\n  return groupElementsSrc;\n};\n","import {\n  give,\n  guestCast,\n  GuestType,\n  patronOnce,\n  sourceAll,\n  SourceChangeableType,\n  sourceOf,\n  SourceType,\n  value,\n} from \"silentium\";\n\n/**\n * Takes source and remember it first value\n * returns new record, what will contain only fields what was changed\n * https://silentium-lab.github.io/silentium-components/#/behaviors/dirty\n */\nexport const dirty = <T extends object>(\n  baseEntitySource: SourceType<T>,\n  becomePatronAuto = false,\n  alwaysKeep: string[] = [],\n  excludeKeys: string[] = [],\n): SourceChangeableType<Partial<T>> => {\n  const comparingSrc = sourceOf();\n  const all = sourceAll([comparingSrc, baseEntitySource]);\n\n  const result = {\n    give(value: T) {\n      give(JSON.parse(JSON.stringify(value)), comparingSrc);\n      return result;\n    },\n    value(guest: GuestType<Partial<T>>) {\n      value(\n        all,\n        guestCast(guest, ([comparing, base]) => {\n          if (!comparing) {\n            return;\n          }\n\n          give(\n            Object.fromEntries(\n              Object.entries(comparing).filter(([key, value]) => {\n                if (alwaysKeep.includes(key)) {\n                  return true;\n                }\n                if (excludeKeys.includes(key)) {\n                  return false;\n                }\n                return value !== (base as any)[key];\n              }),\n            ) as T,\n            guest,\n          );\n        }),\n      );\n      return result;\n    },\n  };\n\n  if (becomePatronAuto) {\n    value(baseEntitySource, patronOnce(result));\n  }\n\n  return result;\n};\n","import { patron, sourceOf, SourceType, subSourceMany, value } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/loading\n */\nexport const loading = (\n  loadingStartSource: SourceType<unknown>,\n  loadingFinishSource: SourceType<unknown>,\n) => {\n  const loadingSrc = sourceOf<boolean>();\n  subSourceMany(loadingSrc, [loadingStartSource, loadingFinishSource]);\n\n  value(\n    loadingStartSource,\n    patron(() => {\n      loadingSrc.give(true);\n    }),\n  );\n  value(\n    loadingFinishSource,\n    patron(() => {\n      loadingSrc.give(false);\n    }),\n  );\n\n  return loadingSrc.value;\n};\n","import {\n  give,\n  patron,\n  sourceAll,\n  sourceOf,\n  SourceType,\n  subSourceMany,\n  value,\n} from \"silentium\";\n\n/**\n * Return source of record path\n * https://silentium-lab.github.io/silentium-components/#/behaviors/path\n */\nexport const path = <\n  T extends Record<string, unknown> | Array<unknown>,\n  K extends string,\n>(\n  baseSrc: SourceType<T>,\n  keySrc: SourceType<K>,\n) => {\n  const pathSrc = sourceOf<unknown>();\n  subSourceMany(pathSrc, [baseSrc, keySrc]);\n\n  value(\n    sourceAll([baseSrc, keySrc]),\n    patron(([base, key]) => {\n      const keyChunks = key.split(\".\");\n      let value: unknown = base;\n      keyChunks.forEach((keyChunk) => {\n        value = (value as Record<string, unknown>)[keyChunk];\n      });\n\n      if (value !== undefined && value !== base) {\n        give(value, pathSrc);\n      }\n    }),\n  );\n\n  return pathSrc.value;\n};\n","import {\n  give,\n  guestCast,\n  GuestType,\n  patronOnce,\n  sourceFiltered,\n  SourceType,\n  value,\n} from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/path\n */\nexport const deadline = <T>(\n  error: GuestType<Error>,\n  baseSrc: SourceType<T>,\n  timeoutSrc: SourceType<number>,\n) => {\n  let timerHead: unknown = null;\n  return (g: GuestType<T>) => {\n    value(\n      timeoutSrc,\n      guestCast(g, (timeout) => {\n        if (timerHead) {\n          clearTimeout(timerHead as number);\n        }\n\n        let timeoutReached = false;\n\n        timerHead = setTimeout(() => {\n          if (timeoutReached) {\n            return;\n          }\n          timeoutReached = true;\n          give(new Error(\"Timeout reached in Deadline class\"), error);\n        }, timeout);\n\n        value(\n          sourceFiltered(baseSrc, () => !timeoutReached),\n          g,\n        );\n\n        value(\n          baseSrc,\n          patronOnce(() => {\n            timeoutReached = true;\n          }),\n        );\n      }),\n    );\n  };\n};\n","import {\n  give,\n  patron,\n  sourceOf,\n  SourceType,\n  subSource,\n  value,\n} from \"silentium\";\n\n/**\n * Accumulates the last value of the source and returns one result once per tick\n * https://silentium-lab.github.io/silentium-components/#/behaviors/tick\n */\nexport const tick = <T>(baseSrc: SourceType<T>) => {\n  const result = sourceOf<T>();\n  subSource(result, baseSrc);\n\n  let microtaskScheduled = false;\n  let lastValue: T | null = null;\n\n  const scheduleMicrotask = () => {\n    microtaskScheduled = true;\n    queueMicrotask(() => {\n      microtaskScheduled = false;\n      if (lastValue !== null) {\n        give(lastValue, result);\n        lastValue = null;\n      }\n    });\n  };\n\n  value(\n    baseSrc,\n    patron((v) => {\n      lastValue = v;\n      if (!microtaskScheduled) {\n        scheduleMicrotask();\n      }\n    }),\n  );\n\n  return result;\n};\n","import {\n  sourceOf,\n  SourceType,\n  sourceResettable,\n  value,\n  patron,\n  removePatronFromPools,\n  GuestObjectType,\n  patronOnce,\n} from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/dirty\n */\nexport const fork = <T, Then, Else>(\n  conditionSrc: SourceType<T>,\n  predicate: (v: T) => boolean,\n  thenSrc: SourceType<Then>,\n  elseSrc?: SourceType<Else>,\n): SourceType<Then | Else> => {\n  const result = sourceOf<Then | Else>();\n  const reset = sourceOf();\n  const resultResettable = sourceResettable(result, reset);\n  let thenPatron: GuestObjectType<Then> | undefined;\n  let elsePatron: GuestObjectType<Else> | undefined;\n\n  value(\n    conditionSrc,\n    patron((v) => {\n      reset.give(1);\n      if (thenPatron) {\n        removePatronFromPools(thenPatron);\n      }\n      if (elsePatron) {\n        removePatronFromPools(elsePatron);\n      }\n      if (predicate(v)) {\n        thenPatron = patronOnce(result);\n        value(thenSrc, thenPatron);\n      } else if (elseSrc) {\n        elsePatron = patronOnce(result);\n        value(elseSrc, elsePatron);\n      }\n    }),\n  );\n\n  return resultResettable;\n};\n","import {\n  patron,\n  sourceOf,\n  sourceResettable,\n  SourceType,\n  value,\n} from \"silentium\";\n\n/**\n * Defer one source after another, gives values of baseSrc only once when triggerSrc responds\n * https://silentium-lab.github.io/silentium-components/#/behaviors/deferred\n */\nexport const deferred = <T>(\n  baseSrc: SourceType<T>,\n  triggerSrc: SourceType<unknown>,\n) => {\n  const result = sourceResettable<T>(sourceOf(), baseSrc as SourceType);\n\n  value(\n    triggerSrc,\n    patron(() => {\n      value(baseSrc, result);\n    }),\n  );\n\n  return result.value;\n};\n","import { patron, patronOnce, sourceOf, SourceType, value } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/branch\n */\nexport const branch = <Then, Else>(\n  conditionSrc: SourceType<boolean>,\n  thenSrc: SourceType<Then>,\n  elseSrc?: SourceType<Else>,\n): SourceType<Then | Else> => {\n  const result = sourceOf<Then | Else>();\n\n  value(\n    conditionSrc,\n    patron((v) => {\n      if (v === true) {\n        value(\n          thenSrc,\n          patronOnce((v) => {\n            result.give(v);\n          }),\n        );\n      } else if (elseSrc !== undefined) {\n        value(\n          elseSrc,\n          patronOnce((v) => {\n            result.give(v);\n          }),\n        );\n      }\n    }),\n  );\n\n  return result.value;\n};\n","import { patron, sourceOf, SourceType, value } from \"silentium\";\n\n/**\n * Didn't respond if new value of baseSrc equals to old value\n * https://silentium-lab.github.io/silentium-components/#/behaviors/memo\n */\nexport const memo = <T>(baseSrc: SourceType<T>) => {\n  const result = sourceOf<T>();\n  let lastValue: T | null = null;\n\n  value(\n    baseSrc,\n    patron((v) => {\n      if (v !== lastValue) {\n        result.give(v);\n        lastValue = v;\n      }\n    }),\n  );\n\n  return result.value;\n};\n","import {\n  destroy,\n  guestDisposable,\n  patron,\n  patronOnce,\n  sourceOf,\n  sourceResettable,\n  SourceType,\n  subSource,\n  value,\n} from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/lock\n */\nexport const lock = <T>(\n  baseSrc: SourceType<T>,\n  lockSrc: SourceType<unknown>,\n) => {\n  const result = sourceOf();\n  const resultResettable = sourceResettable(result, lockSrc);\n  let locked = false;\n  subSource(result, baseSrc);\n\n  value(baseSrc, patron(guestDisposable(result.give, () => locked)));\n\n  value(\n    lockSrc,\n    patronOnce(() => {\n      locked = true;\n      destroy([result]);\n    }),\n  );\n\n  return resultResettable.value;\n};\n","import { give, guestSync, GuestType, SourceType, value } from \"silentium\";\n\n/**\n * Get's value from source in moment of component call and than return this value every time\n * https://silentium-lab.github.io/silentium-components/#/behaviors/moment\n */\nexport const moment = <T>(\n  baseSrc: SourceType<T>,\n  defaultValue?: T,\n): SourceType<T> => {\n  const guest = guestSync(defaultValue);\n  value(baseSrc, guest);\n\n  return (g: GuestType<T>) => {\n    give(guest.value(), g);\n  };\n};\n","import {\n  patron,\n  sourceOf,\n  sourceResettable,\n  sourceSync,\n  SourceType,\n  value,\n} from \"silentium\";\n\n/**\n * Helps to represent only last fresh value of some source, refreshing controls by shotSrc\n * https://silentium-lab.github.io/silentium-components/#/behaviors/shot\n */\nexport const shot = <T>(\n  baseSrc: SourceType<T>,\n  shotSrc: SourceType<unknown>,\n) => {\n  const resetResult = sourceOf();\n  const result = sourceOf<T>();\n\n  const baseSrcSync = sourceSync(baseSrc, null);\n  value(\n    shotSrc,\n    patron(() => {\n      if (baseSrcSync.syncValue() !== null) {\n        result.give(baseSrcSync.syncValue() as T);\n        resetResult.give(1);\n      }\n    }),\n  );\n\n  return sourceResettable(result, resetResult);\n};\n","import { patron, sourceOf, SourceType, subSource, value } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/structures/hash-table\n */\nexport const hashTable = (baseSource: SourceType<[string, unknown]>) => {\n  const result = sourceOf<Record<string, unknown>>({});\n  subSource(result, baseSource);\n\n  value(\n    baseSource,\n    patron(([key, value]) => {\n      result.value((lastRecord) => {\n        lastRecord[key] = value;\n      });\n    }),\n  );\n\n  return result.value;\n};\n","import { give, GuestType, sourceCombined, SourceType } from \"silentium\";\n\n/**\n * Returns record of data from record of sources\n * https://silentium-lab.github.io/silentium-components/#/structures/record\n */\nexport const record = (recordSrc: Record<string, SourceType>) => {\n  const keys = Object.keys(recordSrc);\n  return sourceCombined(...Object.values(recordSrc))(\n    (g: GuestType<Record<string, any>>, ...entries: any[]) => {\n      const record: Record<string, any> = {};\n      entries.forEach((entry, index) => {\n        record[keys[index]] = entry;\n      });\n      give(record, g);\n    },\n  );\n};\n","import { give, GuestType, sourceCombined, SourceType } from \"silentium\";\n\n/**\n * Join sources of strings to one source\n * https://silentium-lab.github.io/silentium-components/#/string/concatenated\n */\nexport const concatenated = (\n  sources: SourceType<string>[],\n  joinPartSrc: SourceType<string> = \"\",\n): SourceType<string> => {\n  const result = sourceCombined(\n    joinPartSrc,\n    ...sources,\n  )((g: GuestType<string>, joinPart, ...strings) => {\n    give(strings.join(joinPart), g);\n  });\n\n  return result;\n};\n","import { give, GuestType, sourceCombined, SourceType } from \"silentium\";\n\n/**\n * Boolean source what checks what string matches pattern\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-matched\n */\nexport const regexpMatched = (\n  patternSrc: SourceType<string>,\n  valueSrc: SourceType<string>,\n  flagsSrc: SourceType<string> = \"\",\n): SourceType<boolean> =>\n  sourceCombined(\n    patternSrc,\n    valueSrc,\n    flagsSrc,\n  )((g: GuestType<boolean>, pattern, value, flags) => {\n    give(new RegExp(pattern, flags).test(value), g);\n  });\n","import {\n  patron,\n  sourceAny,\n  sourceChain,\n  sourceFiltered,\n  sourceOf,\n  SourceType,\n  value,\n} from \"silentium\";\nimport { regexpMatched } from \"../system/RegexpMatched\";\n\nexport interface Route<T> {\n  pattern: string;\n  patternFlags?: string;\n  template: T | SourceType<T>;\n}\n\n/**\n * Router component what will return template if url matches pattern\n * https://silentium-lab.github.io/silentium-components/#/navigation/router\n */\nexport const router = <T = \"string\">(\n  urlSrc: SourceType<string>,\n  routesSrc: SourceType<Route<T>[]>,\n  defaultSrc: SourceType<T>,\n) => {\n  const resultSrc = sourceOf<T>();\n\n  value(\n    routesSrc,\n    patron((routes) => {\n      value(\n        sourceAny([\n          sourceChain(urlSrc, defaultSrc as T),\n          ...routes.map((r) =>\n            sourceChain(\n              sourceFiltered(\n                regexpMatched(r.pattern, urlSrc, r.patternFlags),\n                Boolean,\n              ),\n              r.template,\n            ),\n          ),\n        ]),\n        patron(resultSrc),\n      );\n    }),\n  );\n\n  return resultSrc.value;\n};\n","import { give, GuestType, sourceCombined, SourceType } from \"silentium\";\n\n/**\n * Returns string replaced by regular expression pattern\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-replaced\n */\nexport const regexpReplaced = (\n  valueSrc: SourceType<string>,\n  patternSrc: SourceType<string>,\n  replaceValueSrc: SourceType<string>,\n  flagsSrc: SourceType<string> = \"\",\n): SourceType<string> =>\n  sourceCombined(\n    patternSrc,\n    valueSrc,\n    replaceValueSrc,\n    flagsSrc,\n  )((g: GuestType<string>, pattern, value, replaceValue, flags) => {\n    give(String(value).replace(new RegExp(pattern, flags), replaceValue), g);\n  });\n","import { give, GuestType, sourceCombined, SourceType } from \"silentium\";\n\n/**\n * First match of regexp\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-matched\n */\nexport const regexpMatch = (\n  patternSrc: SourceType<string>,\n  valueSrc: SourceType<string>,\n  flagsSrc: SourceType<string> = \"\",\n): SourceType<string[]> =>\n  sourceCombined(\n    patternSrc,\n    valueSrc,\n    flagsSrc,\n  )((g: GuestType<string[]>, pattern, value, flags) => {\n    const result = new RegExp(pattern, flags).exec(value);\n    give(result ?? [], g);\n  });\n","import { patron, sourceAll, SourceType, value } from \"silentium\";\n\n/**\n * Ability to mutate some object, helpful when integrate to procedure systems\n * https://silentium-lab.github.io/silentium-components/#/system/set\n */\nexport const set = <T extends Record<string, unknown>>(\n  baseSrc: SourceType<T>,\n  keySrc: SourceType<string>,\n  valueSrc: SourceType<unknown>,\n) => {\n  value(\n    sourceAll([baseSrc, keySrc, valueSrc]),\n    patron(([base, key, value]) => {\n      (base as Record<string, unknown>)[key] = value;\n    }),\n  );\n\n  return baseSrc;\n};\n","import { give, GuestType, sourceCombined, SourceType } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/boolean/and\n */\nexport const and = (\n  oneSrc: SourceType<boolean>,\n  twoSrc: SourceType<boolean>,\n) => {\n  return sourceCombined(\n    oneSrc,\n    twoSrc,\n  )((guest: GuestType<boolean>, one, two) => {\n    give(one && two, guest);\n  });\n};\n","import { give, GuestType, sourceCombined, SourceType } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/boolean/or\n */\nexport const or = (\n  oneSrc: SourceType<boolean>,\n  twoSrc: SourceType<boolean>,\n) => {\n  return sourceCombined(\n    oneSrc,\n    twoSrc,\n  )((guest: GuestType<boolean>, one, two) => {\n    give(one || two, guest);\n  });\n};\n","import { give, guestCast, GuestType, SourceType, value } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/boolean/not\n */\nexport const not = (baseSrc: SourceType<boolean>) => {\n  return (g: GuestType<boolean>) => {\n    value(\n      baseSrc,\n      guestCast(g, (base) => {\n        give(!base, g);\n      }),\n    );\n  };\n};\n"],"names":["groupActiveClass","activeClassSrc","activeElementSrc","groupElementsSrc","value","sourceAll","patron","activeClass","activeElement","groupElements","forEach","el","classList","remove","add","dirty","baseEntitySource","becomePatronAuto","alwaysKeep","excludeKeys","comparingSrc","sourceOf","all","result","give","JSON","parse","stringify","guest","guestCast","comparing","base","Object","fromEntries","entries","filter","key","includes","patronOnce","loading","loadingStartSource","loadingFinishSource","loadingSrc","subSourceMany","path","baseSrc","keySrc","pathSrc","keyChunks","split","keyChunk","deadline","error","timeoutSrc","timerHead","g","timeout","clearTimeout","timeoutReached","setTimeout","Error","sourceFiltered","tick","subSource","microtaskScheduled","lastValue","v","queueMicrotask","fork","conditionSrc","predicate","thenSrc","elseSrc","reset","resultResettable","sourceResettable","thenPatron","elsePatron","removePatronFromPools","deferred","triggerSrc","branch","memo","lock","lockSrc","locked","guestDisposable","destroy","moment","defaultValue","guestSync","shot","shotSrc","resetResult","baseSrcSync","sourceSync","syncValue","hashTable","baseSource","lastRecord","record","recordSrc","keys","sourceCombined","values","entry","index","concatenated","sources","joinPartSrc","joinPart","strings","join","regexpMatched","patternSrc","valueSrc","flagsSrc","pattern","flags","RegExp","test","router","urlSrc","routesSrc","defaultSrc","resultSrc","routes","sourceAny","sourceChain","map","r","patternFlags","Boolean","template","regexpReplaced","replaceValueSrc","replaceValue","String","replace","regexpMatch","exec","set","and","oneSrc","twoSrc","one","two","or","not"],"mappings":"gVAOO,MAAMA,EAAmB,CAC9BC,EACAC,EACAC,KAEAC,EACEC,EAAU,CAACJ,EAAgBC,EAAkBC,IAC7CG,GAAO,EAAEC,EAAaC,EAAeC,MACrBA,EAAAC,SAASC,IACjBA,EAAGC,WACFD,EAAAC,UAAUC,OAAON,EAAW,IAGrBC,EAAAI,UAAUE,IAAIP,EAAW,KAIpCJ,GCPIY,EAAQ,CACnBC,EACAC,GAAmB,EACnBC,EAAuB,GACvBC,EAAwB,MAExB,MAAMC,EAAeC,IACfC,EAAMjB,EAAU,CAACe,EAAcJ,IAE/BO,EAAS,CACbC,KAAKpB,IACHoB,EAAKC,KAAKC,MAAMD,KAAKE,UAAUvB,IAASgB,GACjCG,GAETnB,MAAMwB,IACJxB,EACEkB,EACAO,EAAUD,GAAO,EAAEE,EAAWC,MACvBD,GAILN,EACEQ,OAAOC,YACLD,OAAOE,QAAQJ,GAAWK,QAAO,EAAEC,EAAKhC,OAClCc,EAAWmB,SAASD,KAGpBjB,EAAYkB,SAASD,IAGlBhC,IAAW2B,EAAaK,MAGnCR,EACF,KAGGL,IAQJ,OAJHN,GACIb,EAAAY,EAAkBsB,EAAWf,IAG9BA,CAAA,EC1DIgB,EAAU,CACrBC,EACAC,KAEA,MAAMC,EAAarB,IAgBnB,OAfAsB,EAAcD,EAAY,CAACF,EAAoBC,IAE/CrC,EACEoC,EACAlC,GAAO,KACLoC,EAAWlB,MAAK,EAAI,KAGxBpB,EACEqC,EACAnC,GAAO,KACLoC,EAAWlB,MAAK,EAAK,KAIlBkB,EAAWtC,KAAA,ECXPwC,EAAO,CAIlBC,EACAC,KAEA,MAAMC,EAAU1B,IAkBhB,OAjBAsB,EAAcI,EAAS,CAACF,EAASC,IAEjC1C,EACEC,EAAU,CAACwC,EAASC,IACpBxC,GAAO,EAAEyB,EAAMK,MACP,MAAAY,EAAYZ,EAAIa,MAAM,KAC5B,IAAI7C,EAAiB2B,EACXiB,EAAAtC,SAASwC,IACjB9C,EAASA,EAAkC8C,EAAQ,SAGvC,IAAV9C,GAAuBA,IAAU2B,GACnCP,EAAKpB,EAAO2C,EAAO,KAKlBA,EAAQ3C,KAAA,EC1BJ+C,EAAW,CACtBC,EACAP,EACAQ,KAEA,IAAIC,EAAqB,KACzB,OAAQC,IACNnD,EACEiD,EACAxB,EAAU0B,GAAIC,IACRF,GACFG,aAAaH,GAGf,IAAII,GAAiB,EAErBJ,EAAYK,YAAW,KACjBD,IAGaA,GAAA,EACjBlC,EAAK,IAAIoC,MAAM,qCAAsCR,GAAK,GACzDI,GAEHpD,EACEyD,EAAehB,GAAS,KAAOa,IAC/BH,GAGFnD,EACEyC,EACAP,GAAW,KACQoB,GAAA,CAAA,IAErB,IAEJ,CACF,ECrCWI,EAAWjB,IACtB,MAAMtB,EAASF,IACf0C,EAAUxC,EAAQsB,GAElB,IAAImB,GAAqB,EACrBC,EAAsB,KAuBnB,OAVP7D,EACEyC,EACAvC,GAAQ4D,IACMD,EAAAC,EACPF,IAdcA,GAAA,EACrBG,gBAAe,KACQH,GAAA,EACH,OAAdC,IACFzC,EAAKyC,EAAW1C,GACJ0C,EAAA,KAAA,IAUM,KAKjB1C,CAAA,EC3BI6C,EAAO,CAClBC,EACAC,EACAC,EACAC,KAEA,MAAMjD,EAASF,IACToD,EAAQpD,IACRqD,EAAmBC,EAAiBpD,EAAQkD,GAC9C,IAAAG,EACAC,EAsBG,OApBPzE,EACEiE,EACA/D,GAAQ4D,IACNO,EAAMjD,KAAK,GACPoD,GACFE,EAAsBF,GAEpBC,GACFC,EAAsBD,GAEpBP,EAAUJ,IACZU,EAAatC,EAAWf,GACxBnB,EAAMmE,EAASK,IACNJ,IACTK,EAAavC,EAAWf,GACxBnB,EAAMoE,EAASK,GAAU,KAKxBH,CAAA,EClCIK,EAAW,CACtBlC,EACAmC,KAEA,MAAMzD,EAASoD,EAAoBtD,IAAYwB,GAS/C,OAPAzC,EACE4E,EACA1E,GAAO,KACLF,EAAMyC,EAAStB,EAAM,KAIlBA,EAAOnB,KAAA,ECpBH6E,EAAS,CACpBZ,EACAE,EACAC,KAEA,MAAMjD,EAASF,IAuBf,OArBAjB,EACEiE,EACA/D,GAAQ4D,KACI,IAANA,EACF9D,EACEmE,EACAjC,GAAY4B,IACV3C,EAAOC,KAAK0C,EAAC,UAGI,IAAZM,GACTpE,EACEoE,EACAlC,GAAY4B,IACV3C,EAAOC,KAAK0C,EAAC,IAEjB,KAKC3C,EAAOnB,KAAA,EC3BH8E,EAAWrC,IACtB,MAAMtB,EAASF,IACf,IAAI4C,EAAsB,KAY1B,OAVA7D,EACEyC,EACAvC,GAAQ4D,IACFA,IAAMD,IACR1C,EAAOC,KAAK0C,GACAD,EAAAC,EAAA,KAKX3C,EAAOnB,KAAA,ECLH+E,EAAO,CAClBtC,EACAuC,KAEA,MAAM7D,EAASF,IACTqD,EAAmBC,EAAiBpD,EAAQ6D,GAClD,IAAIC,GAAS,EAab,OAZAtB,EAAUxC,EAAQsB,GAEZzC,EAAAyC,EAASvC,EAAOgF,EAAgB/D,EAAOC,MAAM,IAAM6D,MAEzDjF,EACEgF,EACA9C,GAAW,KACA+C,GAAA,EACDE,EAAA,CAAChE,GAAO,KAIbmD,EAAiBtE,KAAA,EC5BboF,EAAS,CACpB3C,EACA4C,KAEM,MAAA7D,EAAQ8D,EAAUD,GAGxB,OAFArF,EAAMyC,EAASjB,GAEP2B,IACD/B,EAAAI,EAAMxB,QAASmD,EAAC,CACvB,ECFWoC,EAAO,CAClB9C,EACA+C,KAEA,MAAMC,EAAcxE,IACdE,EAASF,IAETyE,EAAcC,EAAWlD,EAAS,MAWjC,OAVPzC,EACEwF,EACAtF,GAAO,KAC2B,OAA5BwF,EAAYE,cACPzE,EAAAC,KAAKsE,EAAYE,aACxBH,EAAYrE,KAAK,GAAC,KAKjBmD,EAAiBpD,EAAQsE,EAAW,EC1BhCI,EAAaC,IAClB,MAAA3E,EAASF,EAAkC,IAYjD,OAXA0C,EAAUxC,EAAQ2E,GAElB9F,EACE8F,EACA5F,GAAO,EAAE8B,EAAKhC,MACLmB,EAAAnB,OAAO+F,IACZA,EAAW/D,GAAOhC,CAAAA,GACnB,KAIEmB,EAAOnB,KAAA,ECZHgG,EAAUC,IACf,MAAAC,EAAOtE,OAAOsE,KAAKD,GACzB,OAAOE,KAAkBvE,OAAOwE,OAAOH,GAAhCE,EACL,CAAChD,KAAsCrB,KACrC,MAAMkE,EAA8B,CAAC,EAC7BlE,EAAAxB,SAAQ,CAAC+F,EAAOC,KACtBN,EAAOE,EAAKI,IAAUD,CAAA,IAExBjF,EAAK4E,EAAQ7C,EAAC,GAElB,ECVWoD,EAAe,CAC1BC,EACAC,EAAkC,KAEnBN,EACbM,KACGD,EAFUL,EAGb,CAAChD,EAAsBuD,KAAaC,KACpCvF,EAAKuF,EAAQC,KAAKF,GAAWvD,EAAC,ICRrB0D,EAAgB,CAC3BC,EACAC,EACAC,EAA+B,KAE/Bb,EACEW,EACAC,EACAC,EAHFb,EAIE,CAAChD,EAAuB8D,EAASjH,EAAOkH,KACnC9F,EAAA,IAAI+F,OAAOF,EAASC,GAAOE,KAAKpH,GAAQmD,EAAC,ICKrCkE,EAAS,CACpBC,EACAC,EACAC,KAEA,MAAMC,EAAYxG,IAuBlB,OArBAjB,EACEuH,EACArH,GAAQwH,IACN1H,EACE2H,EAAU,CACRC,EAAYN,EAAQE,MACjBE,EAAOG,KAAKC,GACbF,EACEnE,EACEoD,EAAciB,EAAEb,QAASK,EAAQQ,EAAEC,cACnCC,SAEFF,EAAEG,cAIR/H,EAAOuH,GACT,KAIGA,EAAUzH,KAAA,EC3CNkI,EAAiB,CAC5BnB,EACAD,EACAqB,EACAnB,EAA+B,KAE/Bb,EACEW,EACAC,EACAoB,EACAnB,EAJFb,EAKE,CAAChD,EAAsB8D,EAASjH,EAAOoI,EAAclB,KAChD9F,EAAAiH,OAAOrI,GAAOsI,QAAQ,IAAInB,OAAOF,EAASC,GAAQkB,GAAejF,EAAC,ICZ9DoF,EAAc,CACzBzB,EACAC,EACAC,EAA+B,KAE/Bb,EACEW,EACAC,EACAC,EAHFb,EAIE,CAAChD,EAAwB8D,EAASjH,EAAOkH,KACzC,MAAM/F,EAAS,IAAIgG,OAAOF,EAASC,GAAOsB,KAAKxI,GAC1CoB,EAAAD,GAAU,GAAIgC,EAAC,ICXXsF,EAAM,CACjBhG,EACAC,EACAqE,KAEA/G,EACEC,EAAU,CAACwC,EAASC,EAAQqE,IAC5B7G,GAAO,EAAEyB,EAAMK,EAAKhC,MACjB2B,EAAiCK,GAAOhC,CAAAA,KAItCyC,GCbIiG,EAAM,CACjBC,EACAC,IAEOzC,EACLwC,EACAC,EAFKzC,EAGL,CAAC3E,EAA2BqH,EAAKC,KAC5B1H,EAAAyH,GAAOC,EAAKtH,EAAK,ICRbuH,EAAK,CAChBJ,EACAC,IAEOzC,EACLwC,EACAC,EAFKzC,EAGL,CAAC3E,EAA2BqH,EAAKC,KAC5B1H,EAAAyH,GAAOC,EAAKtH,EAAK,ICRbwH,EAAOvG,GACVU,IACNnD,EACEyC,EACAhB,EAAU0B,GAAIxB,IACPP,GAACO,EAAMwB,EAAC,IAEjB"}