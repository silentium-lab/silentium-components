{"version":3,"file":"silentium-components.min.mjs","sources":["../src/behaviors/Sync.ts","../src/behaviors/Branch.ts","../src/behaviors/Deadline.ts","../src/behaviors/Deferred.ts","../src/behaviors/Dirty.ts","../src/behaviors/Loading.ts","../src/behaviors/Lock.ts","../src/behaviors/Memo.ts","../src/behaviors/OnlyChanged.ts","../src/behaviors/Path.ts","../src/behaviors/Shot.ts","../src/behaviors/Tick.ts","../src/structures/HashTable.ts","../src/structures/RecordOf.ts","../src/strings/Concatenated.ts","../src/strings/Template.ts","../src/system/RegexpMatched.ts","../src/system/RegexpReplaced.ts","../src/system/RegexpMatch.ts","../src/system/Set.ts","../src/navigation/Router.ts","../src/boolean/And.ts","../src/boolean/Or.ts","../src/boolean/Not.ts","../src/boolean/Bool.ts","../src/formats/FromJson.ts","../src/formats/ToJson.ts","../src/lists/First.ts"],"sourcesContent":["import {\n  From,\n  InformationType,\n  isFilled,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\nexport class Sync<T> extends TheInformation<T> {\n  private theValue: T | undefined;\n  private isInit = false;\n\n  public constructor(private baseSrc: InformationType<T>) {\n    super(baseSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    this.baseSrc.value(o);\n    return this;\n  }\n\n  public valueExisted() {\n    this.initOwner();\n    return isFilled(this.theValue);\n  }\n\n  public valueSync(): T {\n    this.initOwner();\n\n    if (!isFilled(this.theValue)) {\n      throw new Error(\"no value in sync\");\n    }\n\n    return this.theValue;\n  }\n\n  public initOwner() {\n    if (!this.isInit) {\n      this.isInit = true;\n      this.value(\n        new From((v) => {\n          this.theValue = v;\n        }),\n      );\n    }\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"silentium\";\nimport { Sync } from \"./Sync\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/branch\n */\nexport class Branch<Then, Else> extends TheInformation<Then | Else> {\n  public constructor(\n    private conditionSrc: InformationType<boolean>,\n    private leftSrc: InformationType<Then>,\n    private rightSrc?: InformationType<Else>,\n  ) {\n    super([conditionSrc, leftSrc, rightSrc]);\n  }\n  public value(o: OwnerType<Then | Else>): this {\n    const leftSync = new Sync(this.leftSrc).initOwner();\n    let rightSync: Sync<Else>;\n\n    if (this.rightSrc !== undefined) {\n      rightSync = new Sync(this.rightSrc).initOwner();\n    }\n\n    this.conditionSrc.value(\n      new From((v) => {\n        if (v) {\n          o.give(leftSync.valueSync());\n        } else if (rightSync) {\n          o.give(rightSync.valueSync());\n        }\n      }),\n    );\n\n    return this;\n  }\n}\n","import {\n  Filtered,\n  From,\n  InformationType,\n  OwnerType,\n  Shared,\n  TheInformation,\n} from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/path\n */\nexport class Deadline<T> extends TheInformation<T> {\n  public constructor(\n    private error: OwnerType<Error>,\n    private baseSrc: InformationType<T>,\n    private timeoutSrc: InformationType<number>,\n  ) {\n    super([error, baseSrc, timeoutSrc]);\n  }\n\n  public value(o: OwnerType<T>) {\n    let timerHead: unknown = null;\n\n    const s = new Shared(this.baseSrc, true);\n    this.addDep(s);\n\n    this.timeoutSrc.value(\n      new From((timeout) => {\n        if (timerHead) {\n          clearTimeout(timerHead as number);\n        }\n        let timeoutReached = false;\n\n        timerHead = setTimeout(() => {\n          if (timeoutReached) {\n            return;\n          }\n          timeoutReached = true;\n          this.error.give(new Error(\"Timeout reached in Deadline class\"));\n        }, timeout);\n\n        const f = new Filtered(s, () => !timeoutReached);\n        this.addDep(f);\n        f.value(o);\n\n        s.value(\n          new From(() => {\n            timeoutReached = true;\n          }),\n        );\n      }),\n    );\n\n    return this;\n  }\n}\n","import {\n  From,\n  InformationType,\n  isFilled,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\nimport { Sync } from \"./Sync\";\n\n/**\n * Defer one source after another, gives values of baseSrc only once when triggerSrc responds\n * https://silentium-lab.github.io/silentium-components/#/behaviors/deferred\n */\nexport class Deferred<T> extends TheInformation<T> {\n  public constructor(\n    private baseSrc: InformationType<T>,\n    private triggerSrc: InformationType<unknown>,\n  ) {\n    super();\n  }\n\n  public value(o: OwnerType<T>): this {\n    const baseSync = new Sync(this.baseSrc).initOwner();\n    this.triggerSrc.value(\n      new From(() => {\n        if (isFilled(baseSync.valueSync())) {\n          o.give(baseSync.valueSync());\n        }\n      }),\n    );\n    return this;\n  }\n}\n","import {\n  All,\n  Applied,\n  From,\n  InformationType,\n  Late,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\n/**\n * Takes source and remember it first value\n * returns new record, what will contain only fields what was changed\n * https://silentium-lab.github.io/silentium-components/#/behaviors/dirty\n */\nexport class Dirty<T> extends TheInformation<T> {\n  private comparingSrc = new Late<T>();\n\n  public constructor(\n    private baseEntitySource: InformationType<T>,\n    private alwaysKeep: string[] = [],\n    private excludeKeys: string[] = [],\n  ) {\n    super([baseEntitySource]);\n  }\n\n  public value(o: OwnerType<T>): this {\n    const comparingDetached = new Applied(this.comparingSrc, (value) =>\n      JSON.parse(JSON.stringify(value)),\n    );\n\n    const allSrc = new All(comparingDetached, this.baseEntitySource).value(\n      new From(([comparing, base]) => {\n        if (!comparing) {\n          return;\n        }\n\n        o.give(\n          Object.fromEntries(\n            Object.entries(comparing).filter(([key, value]) => {\n              if (this.alwaysKeep.includes(key)) {\n                return true;\n              }\n              if (this.excludeKeys.includes(key)) {\n                return false;\n              }\n              return value !== (base as any)[key];\n            }),\n          ) as T,\n        );\n      }),\n    );\n    this.addDep(allSrc);\n\n    return this;\n  }\n\n  public owner() {\n    return this.comparingSrc.owner();\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"silentium\";\n\n/**\n * Representation of loading process\n * first informatin source begins loading\n * second information source stops loading\n * https://silentium-lab.github.io/silentium-components/#/behaviors/loading\n */\nexport class Loading extends TheInformation<boolean> {\n  public constructor(\n    private loadingStartSrc: InformationType<unknown>,\n    private loadingFinishSrc: InformationType<unknown>,\n  ) {\n    super(loadingFinishSrc, loadingStartSrc);\n  }\n\n  public value(o: OwnerType<boolean>): this {\n    this.loadingStartSrc.value(\n      new From(() => {\n        o.give(true);\n      }),\n    );\n\n    this.loadingFinishSrc.value(\n      new From(() => {\n        o.give(false);\n      }),\n    );\n\n    return this;\n  }\n}\n","import {\n  Filtered,\n  From,\n  InformationType,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/lock\n */\nexport class Lock<T> extends TheInformation<T> {\n  public constructor(\n    private baseSrc: InformationType<T>,\n    private lockSrc: InformationType<boolean>,\n  ) {\n    super(baseSrc, lockSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    let locked = false;\n    this.lockSrc.value(\n      new From((newLock) => {\n        locked = newLock;\n      }),\n    );\n    const i = new Filtered(this.baseSrc, () => !locked);\n    this.addDep(i);\n    i.value(o);\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"silentium\";\n\n/**\n * Didn't respond if new value of baseSrc equals to old value\n * https://silentium-lab.github.io/silentium-components/#/behaviors/memo\n */\nexport class Memo<T> extends TheInformation<T> {\n  public constructor(private baseSrc: InformationType<T>) {\n    super(baseSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    let lastValue: T | null = null;\n\n    this.baseSrc.value(\n      new From((v) => {\n        if (v !== lastValue) {\n          o.give(v);\n          lastValue = v;\n        }\n      }),\n    );\n\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"silentium\";\n\n/**\n * Represents source what was changed at least once\n * https://silentium-lab.github.io/silentium-components/#/behaviors/only-changed\n */\nexport class OnlyChanged<T> extends TheInformation<T> {\n  public constructor(private baseSrc: InformationType<T>) {\n    super(baseSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    let firstValue = false;\n\n    this.baseSrc.value(\n      new From((v) => {\n        if (firstValue === false) {\n          firstValue = true;\n        } else {\n          o.give(v);\n        }\n      }),\n    );\n\n    return this;\n  }\n}\n","import {\n  All,\n  From,\n  InformationType,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\n/**\n * Return source of record path\n * https://silentium-lab.github.io/silentium-components/#/behaviors/path\n */\nexport class Path<\n  R,\n  T extends Record<string, unknown> | Array<unknown> = any,\n  K extends string = any,\n> extends TheInformation<R> {\n  public constructor(\n    private baseSrc: InformationType<T>,\n    private keySrc: InformationType<K>,\n  ) {\n    super(baseSrc, keySrc);\n  }\n\n  public value(o: OwnerType<R>): this {\n    const allSrc = new All(this.baseSrc, this.keySrc).value(\n      new From(([base, key]) => {\n        const keyChunks = key.split(\".\");\n        let value: unknown = base;\n        keyChunks.forEach((keyChunk) => {\n          value = (value as Record<string, unknown>)[keyChunk];\n        });\n\n        if (value !== undefined && value !== base) {\n          o.give(value as R);\n        }\n      }),\n    );\n    this.addDep(allSrc);\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"silentium\";\nimport { Sync } from \"./Sync\";\n\n/**\n * Helps to represent only last fresh value of some source, refreshing controls by shotSrc\n * https://silentium-lab.github.io/silentium-components/#/behaviors/shot\n */\nexport class Shot<T> extends TheInformation<T> {\n  public constructor(\n    private targetSrc: InformationType<T>,\n    private triggerSrc: InformationType,\n  ) {\n    super(targetSrc, triggerSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    const targetSync = new Sync(this.targetSrc);\n    targetSync.initOwner();\n\n    this.triggerSrc.value(\n      new From(() => {\n        if (targetSync.valueExisted()) {\n          o.give(targetSync.valueSync());\n        }\n      }),\n    );\n\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"silentium\";\n\n/**\n * Accumulates the last value of the source and returns one result once per tick\n * https://silentium-lab.github.io/silentium-components/#/behaviors/tick\n */\nexport class Tick<T> extends TheInformation<T> {\n  public constructor(private baseSrc: InformationType<T>) {\n    super(baseSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    let microtaskScheduled = false;\n    let lastValue: T | null = null;\n\n    const scheduleMicrotask = () => {\n      microtaskScheduled = true;\n      queueMicrotask(() => {\n        microtaskScheduled = false;\n        if (lastValue !== null) {\n          o.give(lastValue);\n          lastValue = null;\n        }\n      });\n    };\n\n    this.baseSrc.value(\n      new From((v) => {\n        lastValue = v;\n        if (!microtaskScheduled) {\n          scheduleMicrotask();\n        }\n      }),\n    );\n\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/structures/hash-table\n */\nexport class HashTable<T> extends TheInformation<T> {\n  public constructor(private baseSrc: InformationType<[string, unknown]>) {\n    super(baseSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    const record: Record<string, unknown> = {};\n\n    this.baseSrc.value(\n      new From(([key, value]) => {\n        record[key] = value;\n        o.give(record as T);\n      }),\n    );\n\n    return this;\n  }\n}\n","import {\n  All,\n  From,\n  InformationType,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\ntype UnInformation<T> = T extends InformationType<infer U> ? U : never;\n\n/**\n * Returns record of data from record of sources\n * https://silentium-lab.github.io/silentium-components/#/structures/record\n */\nexport class RecordOf<T extends InformationType> extends TheInformation<\n  Record<string, UnInformation<T>>\n> {\n  public constructor(private recordSrc: Record<string, T>) {\n    super(...Object.values(recordSrc));\n  }\n\n  public value(o: OwnerType<Record<string, UnInformation<T>>>): this {\n    const keys = Object.keys(this.recordSrc);\n    new All(...Object.values(this.recordSrc)).value(\n      new From((entries) => {\n        const record: Record<string, any> = {};\n        entries.forEach((entry, index) => {\n          record[keys[index]] = entry;\n        });\n        o.give(record);\n      }),\n    );\n    return this;\n  }\n}\n","import {\n  All,\n  From,\n  InformationType,\n  Of,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\n/**\n * Join sources of strings to one source\n * https://silentium-lab.github.io/silentium-components/#/string/concatenated\n */\nexport class Concatenated extends TheInformation<string> {\n  public constructor(\n    private sources: InformationType<string>[],\n    private joinPartSrc: InformationType<string> = new Of(\"\"),\n  ) {\n    super(...sources, joinPartSrc);\n  }\n\n  public value(o: OwnerType<string>): this {\n    new All(this.joinPartSrc, ...this.sources).value(\n      new From(([joinPart, ...strings]) => {\n        o.give(strings.join(joinPart));\n      }),\n    );\n    return this;\n  }\n}\n","import {\n  All,\n  Applied,\n  InformationType,\n  Of,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\nexport class Template extends TheInformation<string> {\n  private source: InformationType<string>;\n\n  public constructor(\n    theSrc: InformationType<string> | string,\n    private rules: InformationType<Record<string, unknown>>,\n  ) {\n    const source = typeof theSrc === \"string\" ? new Of(theSrc) : theSrc;\n    super(source, rules);\n    this.source = source;\n  }\n\n  public value(guest: OwnerType<string>) {\n    new Applied(new All(this.source, this.rules), ([base, rules]) => {\n      Object.entries(rules).forEach(([ph, val]) => {\n        base = base.replaceAll(ph, String(val));\n      });\n\n      return base;\n    }).value(guest);\n    return this;\n  }\n}\n","import {\n  All,\n  From,\n  InformationType,\n  Of,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\n/**\n * Boolean source what checks what string matches pattern\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-matched\n */\nexport class RegexpMatched extends TheInformation<boolean> {\n  public constructor(\n    private patternSrc: InformationType<string>,\n    private valueSrc: InformationType<string>,\n    private flagsSrc: InformationType<string> = new Of(\"\"),\n  ) {\n    super(patternSrc, valueSrc, flagsSrc);\n  }\n\n  public value(o: OwnerType<boolean>): this {\n    new All(this.patternSrc, this.valueSrc, this.flagsSrc).value(\n      new From(([pattern, value, flags]) => {\n        o.give(new RegExp(pattern, flags).test(value));\n      }),\n    );\n    return this;\n  }\n}\n","import {\n  All,\n  From,\n  InformationType,\n  Of,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\n/**\n * Returns string replaced by regular expression pattern\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-replaced\n */\nexport class RegexpReplaced extends TheInformation<string> {\n  public constructor(\n    private valueSrc: InformationType<string>,\n    private patternSrc: InformationType<string>,\n    private replaceValueSrc: InformationType<string>,\n    private flagsSrc: InformationType<string> = new Of(\"\"),\n  ) {\n    super(valueSrc, patternSrc, replaceValueSrc, flagsSrc);\n  }\n\n  public value(o: OwnerType<string>): this {\n    new All(\n      this.patternSrc,\n      this.valueSrc,\n      this.replaceValueSrc,\n      this.flagsSrc,\n    ).value(\n      new From(([pattern, value, replaceValue, flags]) => {\n        o.give(String(value).replace(new RegExp(pattern, flags), replaceValue));\n      }),\n    );\n    return this;\n  }\n}\n","import {\n  All,\n  From,\n  InformationType,\n  Of,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\n/**\n * First match of regexp\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-matched\n */\nexport class RegexpMatch extends TheInformation<string[]> {\n  public constructor(\n    private patternSrc: InformationType<string>,\n    private valueSrc: InformationType<string>,\n    private flagsSrc: InformationType<string> = new Of(\"\"),\n  ) {\n    super(patternSrc, valueSrc, flagsSrc);\n  }\n\n  public value(o: OwnerType<string[]>): this {\n    new All(this.patternSrc, this.valueSrc, this.flagsSrc).value(\n      new From(([pattern, value, flags]) => {\n        const result = new RegExp(pattern, flags).exec(value);\n        o.give(result ?? []);\n      }),\n    );\n    return this;\n  }\n}\n","import {\n  All,\n  From,\n  InformationType,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\n/**\n * Ability to mutate some object, helpful when integrate to procedure systems\n * https://silentium-lab.github.io/silentium-components/#/system/set\n */\nexport class Set<T extends Record<string, unknown>> extends TheInformation<T> {\n  public constructor(\n    private baseSrc: InformationType<T>,\n    private keySrc: InformationType<string>,\n    private valueSrc: InformationType<unknown>,\n  ) {\n    super(baseSrc, keySrc, valueSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    new All(this.baseSrc, this.keySrc, this.valueSrc).value(\n      new From(([base, key, value]) => {\n        (base as Record<string, unknown>)[key] = value;\n        o.give(base);\n      }),\n    );\n    return this;\n  }\n}\n","import {\n  Any,\n  Chain,\n  From,\n  InformationType,\n  Of,\n  OwnerType,\n  TheInformation,\n  TheOwner,\n} from \"silentium\";\nimport { Branch } from \"../behaviors\";\nimport { RegexpMatched } from \"../system\";\n\nexport interface Route<T> {\n  pattern: string;\n  patternFlags?: string;\n  template: T | InformationType<T>;\n}\n\n/**\n * Router component what will return template if url matches pattern\n * https://silentium-lab.github.io/silentium-components/#/navigation/router\n */\nexport class Router<T = \"string\"> extends TheInformation<T> {\n  public constructor(\n    private urlSrc: InformationType<string>,\n    private routesSrc: InformationType<Route<T>[]>,\n    private defaultSrc: InformationType<T>,\n  ) {\n    super(urlSrc, routesSrc, defaultSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    this.routesSrc.value(\n      new From((routes) => {\n        new Any(\n          new Chain(this.urlSrc, this.defaultSrc),\n          ...routes.map((r) => {\n            return new Branch(\n              new RegexpMatched(\n                new Of(r.pattern),\n                this.urlSrc,\n                r.patternFlags ? new Of(r.patternFlags) : undefined,\n              ),\n              (r.template instanceof TheInformation\n                ? r.template\n                : new Of(r.template)) as TheInformation,\n            );\n          }),\n        ).value(o as TheOwner);\n      }),\n    );\n    return this;\n  }\n}\n","import {\n  All,\n  From,\n  InformationType,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/boolean/and\n */\nexport class And extends TheInformation<boolean> {\n  public constructor(\n    private oneSrc: InformationType<boolean>,\n    private twoSrc: InformationType<boolean>,\n  ) {\n    super(oneSrc, twoSrc);\n  }\n\n  public value(o: OwnerType<boolean>): this {\n    new All(this.oneSrc, this.twoSrc).value(\n      new From(([one, two]) => {\n        o.give(one && two);\n      }),\n    );\n    return this;\n  }\n}\n","import {\n  All,\n  From,\n  InformationType,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/boolean/or\n */\nexport class Or extends TheInformation<boolean> {\n  public constructor(\n    private oneSrc: InformationType<boolean>,\n    private twoSrc: InformationType<boolean>,\n  ) {\n    super(oneSrc, twoSrc);\n  }\n\n  public value(o: OwnerType<boolean>): this {\n    new All(this.oneSrc, this.twoSrc).value(\n      new From(([one, two]) => {\n        o.give(one || two);\n      }),\n    );\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/boolean/not\n */\nexport class Not extends TheInformation<boolean> {\n  public constructor(private baseSrc: InformationType<boolean>) {\n    super(baseSrc);\n  }\n\n  public value(o: OwnerType<boolean>): this {\n    this.baseSrc.value(\n      new From((v) => {\n        o.give(!v);\n      }),\n    );\n    return this;\n  }\n}\n","import { Applied, InformationType, OwnerType, TheInformation } from \"silentium\";\n\n/**\n * Convert any source to boolean source\n * https://silentium-lab.github.io/silentium-components/#/boolean/bool\n */\nexport class Bool extends TheInformation<boolean> {\n  public constructor(private baseSrc: InformationType) {\n    super(baseSrc);\n  }\n\n  public value(o: OwnerType<boolean>): this {\n    new Applied(this.baseSrc, Boolean).value(o);\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"silentium\";\n\n/**\n * Represents object from json\n */\nexport class FromJson<T> extends TheInformation<T> {\n  public constructor(\n    private jsonSrc: InformationType<string>,\n    private errorOwner?: OwnerType,\n  ) {\n    super(jsonSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    this.jsonSrc.value(\n      new From((json) => {\n        try {\n          o.give(JSON.parse(json));\n        } catch (error) {\n          this.errorOwner?.give(new Error(`Failed to parse JSON: ${error}`));\n        }\n      }),\n    );\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"silentium\";\n\n/**\n * Represents json from object\n */\nexport class ToJson extends TheInformation<string> {\n  public constructor(\n    private dataSrc: InformationType,\n    private errorOwner?: OwnerType,\n  ) {\n    super(dataSrc);\n  }\n\n  public value(o: OwnerType<string>): this {\n    this.dataSrc.value(\n      new From((data: unknown) => {\n        try {\n          o.give(JSON.stringify(data));\n        } catch {\n          this.errorOwner?.give(new Error(\"Failed to convert to JSON\"));\n        }\n      }),\n    );\n    return this;\n  }\n}\n","import { Applied, InformationType, OwnerType, TheInformation } from \"silentium\";\n\n/**\n * Represents the first element of an array.\n */\nexport class First<T extends Array<unknown>> extends TheInformation<T[0]> {\n  public constructor(private baseSrc: InformationType<T>) {\n    super(baseSrc);\n  }\n\n  public value(o: OwnerType<T[0]>): this {\n    new Applied(this.baseSrc, (a) => a[0]).value(o);\n    return this;\n  }\n}\n"],"names":["Sync","TheInformation","constructor","baseSrc","super","this","__publicField","value","o","valueExisted","initOwner","isFilled","theValue","valueSync","Error","isInit","From","v","Branch","conditionSrc","leftSrc","rightSrc","leftSync","rightSync","give","Deadline","error","timeoutSrc","timerHead","s","Shared","addDep","timeout","clearTimeout","timeoutReached","setTimeout","f","Filtered","Deferred","triggerSrc","baseSync","Dirty","baseEntitySource","alwaysKeep","excludeKeys","Late","comparingDetached","Applied","comparingSrc","JSON","parse","stringify","allSrc","All","comparing","base","Object","fromEntries","entries","filter","key","includes","owner","Loading","loadingStartSrc","loadingFinishSrc","Lock","lockSrc","locked","newLock","i","Memo","lastValue","OnlyChanged","firstValue","Path","keySrc","keyChunks","split","forEach","keyChunk","Shot","targetSrc","targetSync","Tick","microtaskScheduled","queueMicrotask","HashTable","record","RecordOf","recordSrc","values","keys","entry","index","Concatenated","sources","joinPartSrc","Of","joinPart","strings","join","Template","theSrc","rules","source","guest","ph","val","replaceAll","String","RegexpMatched","patternSrc","valueSrc","flagsSrc","pattern","flags","RegExp","test","RegexpReplaced","replaceValueSrc","replaceValue","replace","RegexpMatch","result","exec","Set","Router","urlSrc","routesSrc","defaultSrc","routes","Any","Chain","map","r","patternFlags","template","And","oneSrc","twoSrc","one","two","Or","Not","Bool","Boolean","FromJson","jsonSrc","errorOwner","json","ToJson","dataSrc","data","First","a"],"mappings":"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"}