{"version":3,"file":"silentium-components.min.mjs","sources":["../src/behaviors/Sync.ts","../src/behaviors/Branch.ts","../src/behaviors/Const.ts","../src/behaviors/Deadline.ts","../src/behaviors/Deferred.ts","../src/behaviors/Dirty.ts","../src/behaviors/Loading.ts","../src/behaviors/Lock.ts","../src/behaviors/Memo.ts","../src/behaviors/OnlyChanged.ts","../src/behaviors/Part.ts","../src/behaviors/Path.ts","../src/behaviors/Polling.ts","../src/behaviors/Shot.ts","../src/behaviors/Tick.ts","../src/behaviors/Task.ts","../src/structures/HashTable.ts","../src/structures/RecordOf.ts","../src/strings/Concatenated.ts","../src/strings/Template.ts","../src/behaviors/BranchLazy.ts","../src/system/RegexpMatched.ts","../src/system/RegexpReplaced.ts","../src/system/RegexpMatch.ts","../src/system/Set.ts","../src/navigation/Router.ts","../src/boolean/And.ts","../src/boolean/Or.ts","../src/boolean/Not.ts","../src/boolean/Bool.ts","../src/formats/FromJson.ts","../src/formats/ToJson.ts","../src/lists/First.ts"],"sourcesContent":["import {\n  From,\n  InformationType,\n  isFilled,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\nexport class Sync<T> extends TheInformation<T> {\n  private theValue: T | undefined;\n  private isInit = false;\n\n  public constructor(private baseSrc: InformationType<T>) {\n    super(baseSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    this.baseSrc.value(o);\n    return this;\n  }\n\n  public valueExisted() {\n    this.initOwner();\n    return isFilled(this.theValue);\n  }\n\n  public valueSync(): T {\n    this.initOwner();\n\n    if (!isFilled(this.theValue)) {\n      throw new Error(\"no value in sync\");\n    }\n\n    return this.theValue;\n  }\n\n  public initOwner() {\n    if (!this.isInit) {\n      this.isInit = true;\n      this.value(\n        new From((v) => {\n          this.theValue = v;\n        }),\n      );\n    }\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"silentium\";\nimport { Sync } from \"./Sync\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/branch\n */\nexport class Branch<Then, Else> extends TheInformation<Then | Else> {\n  public constructor(\n    private conditionSrc: InformationType<boolean>,\n    private leftSrc: InformationType<Then>,\n    private rightSrc?: InformationType<Else>,\n  ) {\n    super([conditionSrc, leftSrc, rightSrc]);\n  }\n  public value(o: OwnerType<Then | Else>): this {\n    const leftSync = new Sync(this.leftSrc).initOwner();\n    let rightSync: Sync<Else>;\n\n    if (this.rightSrc !== undefined) {\n      rightSync = new Sync(this.rightSrc).initOwner();\n    }\n\n    this.conditionSrc.value(\n      new From((v) => {\n        if (v) {\n          o.give(leftSync.valueSync());\n        } else if (rightSync) {\n          o.give(rightSync.valueSync());\n        }\n      }),\n    );\n\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"silentium\";\n\nexport class Const<T> extends TheInformation<T> {\n  public constructor(\n    private permanentValue: T,\n    private triggerSrc: InformationType,\n  ) {\n    super(triggerSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    this.triggerSrc.value(\n      new From(() => {\n        o.give(this.permanentValue);\n      }),\n    );\n    return this;\n  }\n}\n","import {\n  Filtered,\n  From,\n  InformationType,\n  OwnerType,\n  Shared,\n  TheInformation,\n} from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/path\n */\nexport class Deadline<T> extends TheInformation<T> {\n  public constructor(\n    private error: OwnerType<Error>,\n    private baseSrc: InformationType<T>,\n    private timeoutSrc: InformationType<number>,\n  ) {\n    super([error, baseSrc, timeoutSrc]);\n  }\n\n  public value(o: OwnerType<T>) {\n    let timerHead: unknown = null;\n\n    const s = new Shared(this.baseSrc, true);\n    this.addDep(s);\n\n    this.timeoutSrc.value(\n      new From((timeout) => {\n        if (timerHead) {\n          clearTimeout(timerHead as number);\n        }\n        let timeoutReached = false;\n\n        timerHead = setTimeout(() => {\n          if (timeoutReached) {\n            return;\n          }\n          timeoutReached = true;\n          this.error.give(new Error(\"Timeout reached in Deadline class\"));\n        }, timeout);\n\n        const f = new Filtered(s, () => !timeoutReached);\n        this.addDep(f);\n        f.value(o);\n\n        s.value(\n          new From(() => {\n            timeoutReached = true;\n          }),\n        );\n      }),\n    );\n\n    return this;\n  }\n}\n","import {\n  From,\n  InformationType,\n  isFilled,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\nimport { Sync } from \"./Sync\";\n\n/**\n * Defer one source after another, gives values of baseSrc only once when triggerSrc responds\n * https://silentium-lab.github.io/silentium-components/#/behaviors/deferred\n */\nexport class Deferred<T> extends TheInformation<T> {\n  public constructor(\n    private baseSrc: InformationType<T>,\n    private triggerSrc: InformationType<unknown>,\n  ) {\n    super();\n  }\n\n  public value(o: OwnerType<T>): this {\n    const baseSync = new Sync(this.baseSrc).initOwner();\n    this.triggerSrc.value(\n      new From(() => {\n        if (isFilled(baseSync.valueSync())) {\n          o.give(baseSync.valueSync());\n        }\n      }),\n    );\n    return this;\n  }\n}\n","import {\n  All,\n  Applied,\n  From,\n  InformationType,\n  Late,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\n/**\n * Takes source and remember it first value\n * returns new record, what will contain only fields what was changed\n * https://silentium-lab.github.io/silentium-components/#/behaviors/dirty\n */\nexport class Dirty<T> extends TheInformation<T> implements OwnerType<T> {\n  private comparingSrc = new Late<T>();\n\n  public constructor(\n    private baseEntitySource: InformationType<T>,\n    private alwaysKeep: string[] = [],\n    private excludeKeys: string[] = [],\n  ) {\n    super([baseEntitySource]);\n  }\n\n  public value(o: OwnerType<T>): this {\n    const comparingDetached = new Applied(this.comparingSrc, (value) =>\n      JSON.parse(JSON.stringify(value)),\n    );\n\n    const allSrc = new All(comparingDetached, this.baseEntitySource).value(\n      new From(([comparing, base]) => {\n        if (!comparing) {\n          return;\n        }\n\n        o.give(\n          Object.fromEntries(\n            Object.entries(comparing).filter(([key, value]) => {\n              if (this.alwaysKeep.includes(key)) {\n                return true;\n              }\n              if (this.excludeKeys.includes(key)) {\n                return false;\n              }\n              return value !== (base as any)[key];\n            }),\n          ) as T,\n        );\n      }),\n    );\n    this.addDep(allSrc);\n\n    return this;\n  }\n\n  public give(value: T): this {\n    this.comparingSrc.give(value);\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"silentium\";\n\n/**\n * Representation of loading process\n * first informatin source begins loading\n * second information source stops loading\n * https://silentium-lab.github.io/silentium-components/#/behaviors/loading\n */\nexport class Loading extends TheInformation<boolean> {\n  public constructor(\n    private loadingStartSrc: InformationType<unknown>,\n    private loadingFinishSrc: InformationType<unknown>,\n  ) {\n    super(loadingFinishSrc, loadingStartSrc);\n  }\n\n  public value(o: OwnerType<boolean>): this {\n    this.loadingStartSrc.value(\n      new From(() => {\n        o.give(true);\n      }),\n    );\n\n    this.loadingFinishSrc.value(\n      new From(() => {\n        o.give(false);\n      }),\n    );\n\n    return this;\n  }\n}\n","import {\n  Filtered,\n  From,\n  InformationType,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/lock\n */\nexport class Lock<T> extends TheInformation<T> {\n  public constructor(\n    private baseSrc: InformationType<T>,\n    private lockSrc: InformationType<boolean>,\n  ) {\n    super(baseSrc, lockSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    let locked = false;\n    this.lockSrc.value(\n      new From((newLock) => {\n        locked = newLock;\n      }),\n    );\n    const i = new Filtered(this.baseSrc, () => !locked);\n    this.addDep(i);\n    i.value(o);\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"silentium\";\n\n/**\n * Didn't respond if new value of baseSrc equals to old value\n * https://silentium-lab.github.io/silentium-components/#/behaviors/memo\n */\nexport class Memo<T> extends TheInformation<T> {\n  public constructor(private baseSrc: InformationType<T>) {\n    super(baseSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    let lastValue: T | null = null;\n\n    this.baseSrc.value(\n      new From((v) => {\n        if (v !== lastValue) {\n          o.give(v);\n          lastValue = v;\n        }\n      }),\n    );\n\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"silentium\";\n\n/**\n * Represents source what was changed at least once\n * https://silentium-lab.github.io/silentium-components/#/behaviors/only-changed\n */\nexport class OnlyChanged<T> extends TheInformation<T> {\n  public constructor(private baseSrc: InformationType<T>) {\n    super(baseSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    let firstValue = false;\n\n    this.baseSrc.value(\n      new From((v) => {\n        if (firstValue === false) {\n          firstValue = true;\n        } else {\n          o.give(v);\n        }\n      }),\n    );\n\n    return this;\n  }\n}\n","import {\n  All,\n  From,\n  InformationType,\n  MaybeInformationType,\n  MbInfo,\n  OwnerType,\n  SourceType,\n  TheInformation,\n} from \"silentium\";\nimport { Sync } from \"../behaviors/Sync\";\n\n/**\n * Return source of record path\n * https://silentium-lab.github.io/silentium-components/#/behaviors/path\n */\nexport class Part<\n    R,\n    T extends Record<string, unknown> | Array<unknown> = any,\n    K extends string = any,\n  >\n  extends TheInformation<R>\n  implements OwnerType<R>\n{\n  private baseSync: Sync<T>;\n  private keySync: Sync<string>;\n  private keySrc: InformationType<string>;\n\n  public constructor(\n    private baseSrc: SourceType<T>,\n    private key: MaybeInformationType<K>,\n  ) {\n    super(baseSrc);\n    this.keySrc = new MbInfo(key);\n    this.baseSync = new Sync(baseSrc);\n    this.keySync = new Sync(this.keySrc);\n  }\n\n  public value(o: OwnerType<R>): this {\n    const allSrc = new All(this.baseSrc, this.keySrc).value(\n      new From(([base, key]) => {\n        const keyChunks = key.split(\".\");\n        let value: unknown = base;\n        keyChunks.forEach((keyChunk) => {\n          value = (value as Record<string, unknown>)[keyChunk];\n        });\n\n        if (value !== undefined && value !== base) {\n          o.give(value as R);\n        }\n      }),\n    );\n    this.addDep(allSrc);\n    return this;\n  }\n\n  public give(value: R): this {\n    this.baseSrc.give({\n      ...this.baseSync.valueSync(),\n      [this.keySync.valueSync()]: value,\n    });\n    return this;\n  }\n}\n","import {\n  All,\n  From,\n  InformationType,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\n/**\n * Return source of record path\n * https://silentium-lab.github.io/silentium-components/#/behaviors/path\n */\nexport class Path<\n  R,\n  T extends Record<string, unknown> | Array<unknown> = any,\n  K extends string = any,\n> extends TheInformation<R> {\n  public constructor(\n    private baseSrc: InformationType<T>,\n    private keySrc: InformationType<K>,\n  ) {\n    super(baseSrc, keySrc);\n  }\n\n  public value(o: OwnerType<R>): this {\n    const allSrc = new All(this.baseSrc, this.keySrc).value(\n      new From(([base, key]) => {\n        const keyChunks = key.split(\".\");\n        let value: unknown = base;\n        keyChunks.forEach((keyChunk) => {\n          value = (value as Record<string, unknown>)[keyChunk];\n        });\n\n        if (value !== undefined && value !== base) {\n          o.give(value as R);\n        }\n      }),\n    );\n    this.addDep(allSrc);\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"silentium\";\n\nexport class Polling<T> extends TheInformation<T> {\n  public constructor(\n    private baseSrc: InformationType<T>,\n    private triggerSrc: InformationType<T>,\n  ) {\n    super(baseSrc, triggerSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    this.triggerSrc.value(\n      new From(() => {\n        this.baseSrc.value(\n          new From((v) => {\n            o.give(v);\n          }),\n        );\n      }),\n    );\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"silentium\";\nimport { Sync } from \"./Sync\";\n\n/**\n * Helps to represent only last fresh value of some source, refreshing controls by shotSrc\n * https://silentium-lab.github.io/silentium-components/#/behaviors/shot\n */\nexport class Shot<T> extends TheInformation<T> {\n  public constructor(\n    private targetSrc: InformationType<T>,\n    private triggerSrc: InformationType,\n  ) {\n    super(targetSrc, triggerSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    const targetSync = new Sync(this.targetSrc);\n    targetSync.initOwner();\n\n    this.triggerSrc.value(\n      new From(() => {\n        if (targetSync.valueExisted()) {\n          o.give(targetSync.valueSync());\n        }\n      }),\n    );\n\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"silentium\";\n\n/**\n * Accumulates the last value of the source and returns one result once per tick\n * https://silentium-lab.github.io/silentium-components/#/behaviors/tick\n */\nexport class Tick<T> extends TheInformation<T> {\n  public constructor(private baseSrc: InformationType<T>) {\n    super(baseSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    let microtaskScheduled = false;\n    let lastValue: T | null = null;\n\n    const scheduleMicrotask = () => {\n      microtaskScheduled = true;\n      queueMicrotask(() => {\n        microtaskScheduled = false;\n        if (lastValue !== null) {\n          o.give(lastValue);\n          lastValue = null;\n        }\n      });\n    };\n\n    this.baseSrc.value(\n      new From((v) => {\n        lastValue = v;\n        if (!microtaskScheduled) {\n          scheduleMicrotask();\n        }\n      }),\n    );\n\n    return this;\n  }\n}\n","import {\n  ExecutorApplied,\n  InformationType,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\nexport class Task<T> extends TheInformation<T> {\n  public constructor(\n    private baseSrc: InformationType<T>,\n    private delay: number = 0,\n  ) {\n    super(baseSrc);\n  }\n\n  public value(o: OwnerType<T>) {\n    let prevTimer: unknown | null = null;\n    new ExecutorApplied(this.baseSrc, (fn) => {\n      return (v) => {\n        if (prevTimer) {\n          clearTimeout(prevTimer as number);\n        }\n        prevTimer = setTimeout(() => {\n          fn(v);\n        }, this.delay);\n      };\n    }).value(o);\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/structures/hash-table\n */\nexport class HashTable<T> extends TheInformation<T> {\n  public constructor(private baseSrc: InformationType<[string, unknown]>) {\n    super(baseSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    const record: Record<string, unknown> = {};\n\n    this.baseSrc.value(\n      new From(([key, value]) => {\n        record[key] = value;\n        o.give(record as T);\n      }),\n    );\n\n    return this;\n  }\n}\n","import {\n  All,\n  From,\n  InformationType,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\ntype UnInformation<T> = T extends InformationType<infer U> ? U : never;\n\n/**\n * Returns record of data from record of sources\n * https://silentium-lab.github.io/silentium-components/#/structures/record\n */\nexport class RecordOf<T extends InformationType> extends TheInformation<\n  Record<string, UnInformation<T>>\n> {\n  public constructor(private recordSrc: Record<string, T>) {\n    super(...Object.values(recordSrc));\n  }\n\n  public value(o: OwnerType<Record<string, UnInformation<T>>>): this {\n    const keys = Object.keys(this.recordSrc);\n    new All(...Object.values(this.recordSrc)).value(\n      new From((entries) => {\n        const record: Record<string, any> = {};\n        entries.forEach((entry, index) => {\n          record[keys[index]] = entry;\n        });\n        o.give(record);\n      }),\n    );\n    return this;\n  }\n}\n","import {\n  All,\n  From,\n  InformationType,\n  Of,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\n/**\n * Join sources of strings to one source\n * https://silentium-lab.github.io/silentium-components/#/string/concatenated\n */\nexport class Concatenated extends TheInformation<string> {\n  public constructor(\n    private sources: InformationType<string>[],\n    private joinPartSrc: InformationType<string> = new Of(\"\"),\n  ) {\n    super(...sources, joinPartSrc);\n  }\n\n  public value(o: OwnerType<string>): this {\n    new All(this.joinPartSrc, ...this.sources).value(\n      new From(([joinPart, ...strings]) => {\n        o.give(strings.join(joinPart));\n      }),\n    );\n    return this;\n  }\n}\n","import {\n  All,\n  Applied,\n  InformationType,\n  Of,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\nimport { RecordOf } from \"../structures\";\n\nexport class Template extends TheInformation<string> {\n  private source: InformationType<string>;\n  private placesCounter = 0;\n  private vars: Record<string, InformationType> = {\n    $TPL: new Of(\"$TPL\"),\n  };\n\n  public constructor(\n    theSrc: InformationType<string> | string = \"\",\n    private placesSrc: InformationType<Record<string, unknown>> = new Of({}),\n  ) {\n    const source = typeof theSrc === \"string\" ? new Of(theSrc) : theSrc;\n    super(source, placesSrc);\n    this.source = source;\n  }\n\n  public value(guest: OwnerType<string>) {\n    const varsSrc = new RecordOf(this.vars);\n    new Applied(\n      new All(this.source, this.placesSrc, varsSrc),\n      ([base, rules, vars]) => {\n        Object.entries(rules).forEach(([ph, val]) => {\n          base = base.replaceAll(ph, String(val));\n        });\n        Object.entries(vars).forEach(([ph, val]) => {\n          base = base.replaceAll(ph, String(val));\n        });\n\n        return base;\n      },\n    ).value(guest);\n    return this;\n  }\n\n  public template(value: string) {\n    this.source = new Of(value);\n    this.addDep(this.source);\n    return this;\n  }\n\n  /**\n   * Ability to register variable\n   * in concrete place of template\n   */\n  public var(src: InformationType<string>) {\n    this.addDep(src);\n    const varName = `$var${this.placesCounter}`;\n    this.placesCounter += 1;\n    this.vars[varName] = src;\n    return varName;\n  }\n}\n","import {\n  Destroyable,\n  From,\n  InformationType,\n  Lazy,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/branch\n */\nexport class BranchLazy<Then, Else> extends TheInformation<Then | Else> {\n  private instances: Destroyable[] = [];\n\n  public constructor(\n    private conditionSrc: InformationType<boolean>,\n    private leftSrc: Lazy<Then>,\n    private rightSrc?: Lazy<Else>,\n  ) {\n    super([conditionSrc, leftSrc, rightSrc]);\n  }\n\n  public value(o: OwnerType<Then | Else>): this {\n    this.conditionSrc.value(\n      new From((v) => {\n        if (this.instances.length) {\n          this.instances.forEach((instance) => {\n            instance?.destroy();\n          });\n        }\n        let instance: InformationType | null = null;\n        if (v) {\n          instance = this.leftSrc.get();\n        } else if (this.rightSrc) {\n          instance = this.rightSrc.get();\n        }\n        if (instance) {\n          this.instances.push(instance as unknown as Destroyable);\n          instance.value(o);\n        }\n      }),\n    );\n\n    return this;\n  }\n}\n","import {\n  All,\n  From,\n  InformationType,\n  Of,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\n/**\n * Boolean source what checks what string matches pattern\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-matched\n */\nexport class RegexpMatched extends TheInformation<boolean> {\n  public constructor(\n    private patternSrc: InformationType<string>,\n    private valueSrc: InformationType<string>,\n    private flagsSrc: InformationType<string> = new Of(\"\"),\n  ) {\n    super(patternSrc, valueSrc, flagsSrc);\n  }\n\n  public value(o: OwnerType<boolean>): this {\n    new All(this.patternSrc, this.valueSrc, this.flagsSrc).value(\n      new From(([pattern, value, flags]) => {\n        o.give(new RegExp(pattern, flags).test(value));\n      }),\n    );\n    return this;\n  }\n}\n","import {\n  All,\n  From,\n  InformationType,\n  Of,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\n/**\n * Returns string replaced by regular expression pattern\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-replaced\n */\nexport class RegexpReplaced extends TheInformation<string> {\n  public constructor(\n    private valueSrc: InformationType<string>,\n    private patternSrc: InformationType<string>,\n    private replaceValueSrc: InformationType<string>,\n    private flagsSrc: InformationType<string> = new Of(\"\"),\n  ) {\n    super(valueSrc, patternSrc, replaceValueSrc, flagsSrc);\n  }\n\n  public value(o: OwnerType<string>): this {\n    new All(\n      this.patternSrc,\n      this.valueSrc,\n      this.replaceValueSrc,\n      this.flagsSrc,\n    ).value(\n      new From(([pattern, value, replaceValue, flags]) => {\n        o.give(String(value).replace(new RegExp(pattern, flags), replaceValue));\n      }),\n    );\n    return this;\n  }\n}\n","import {\n  All,\n  From,\n  InformationType,\n  Of,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\n/**\n * First match of regexp\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-matched\n */\nexport class RegexpMatch extends TheInformation<string[]> {\n  public constructor(\n    private patternSrc: InformationType<string>,\n    private valueSrc: InformationType<string>,\n    private flagsSrc: InformationType<string> = new Of(\"\"),\n  ) {\n    super(patternSrc, valueSrc, flagsSrc);\n  }\n\n  public value(o: OwnerType<string[]>): this {\n    new All(this.patternSrc, this.valueSrc, this.flagsSrc).value(\n      new From(([pattern, value, flags]) => {\n        const result = new RegExp(pattern, flags).exec(value);\n        o.give(result ?? []);\n      }),\n    );\n    return this;\n  }\n}\n","import {\n  All,\n  From,\n  InformationType,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\n/**\n * Ability to mutate some object, helpful when integrate to procedure systems\n * https://silentium-lab.github.io/silentium-components/#/system/set\n */\nexport class Set<T extends Record<string, unknown>> extends TheInformation<T> {\n  public constructor(\n    private baseSrc: InformationType<T>,\n    private keySrc: InformationType<string>,\n    private valueSrc: InformationType<unknown>,\n  ) {\n    super(baseSrc, keySrc, valueSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    new All(this.baseSrc, this.keySrc, this.valueSrc).value(\n      new From(([base, key, value]) => {\n        (base as Record<string, unknown>)[key] = value;\n        o.give(base);\n      }),\n    );\n    return this;\n  }\n}\n","import {\n  All,\n  Applied,\n  Destroyable,\n  From,\n  InformationType,\n  Lazy,\n  Of,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\nimport { BranchLazy } from \"../behaviors/BranchLazy\";\nimport { RegexpMatched } from \"../system\";\n\nexport interface Route<T> {\n  pattern: string;\n  patternFlags?: string;\n  template: Lazy<T>;\n}\n\nconst emptySrc = new Lazy(() => new Of(false));\n\n/**\n * Router component what will return template if url matches pattern\n * https://silentium-lab.github.io/silentium-components/#/navigation/router\n */\nexport class Router<T = \"string\"> extends TheInformation<T> {\n  private instance?: Destroyable;\n\n  public constructor(\n    private urlSrc: InformationType<string>,\n    private routesSrc: InformationType<Route<T>[]>,\n    private defaultSrc: Lazy<T>,\n  ) {\n    super(urlSrc, routesSrc, defaultSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    new All(this.routesSrc, this.urlSrc).value(\n      new From(([routes, url]) => {\n        if (this.instance) {\n          this.instance?.destroy();\n        }\n\n        this.instance = new All(\n          this.defaultSrc.get(),\n          new All(\n            ...routes.map(\n              (r) =>\n                new BranchLazy(\n                  new RegexpMatched(\n                    new Of(r.pattern),\n                    new Of(url),\n                    r.patternFlags ? new Of(r.patternFlags) : undefined,\n                  ),\n                  r.template,\n                  emptySrc,\n                ),\n            ),\n          ),\n        );\n\n        new Applied(\n          this.instance as unknown as InformationType,\n          (r: [string, (string | boolean)[]]) => {\n            const firstReal = r[1].find((r) => r !== false);\n\n            if (firstReal) {\n              return firstReal as T;\n            }\n\n            return r[0];\n          },\n        ).value(o);\n      }),\n    );\n    return this;\n  }\n}\n","import {\n  All,\n  From,\n  InformationType,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/boolean/and\n */\nexport class And extends TheInformation<boolean> {\n  public constructor(\n    private oneSrc: InformationType<boolean>,\n    private twoSrc: InformationType<boolean>,\n  ) {\n    super(oneSrc, twoSrc);\n  }\n\n  public value(o: OwnerType<boolean>): this {\n    new All(this.oneSrc, this.twoSrc).value(\n      new From(([one, two]) => {\n        o.give(one && two);\n      }),\n    );\n    return this;\n  }\n}\n","import {\n  All,\n  From,\n  InformationType,\n  OwnerType,\n  TheInformation,\n} from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/boolean/or\n */\nexport class Or extends TheInformation<boolean> {\n  public constructor(\n    private oneSrc: InformationType<boolean>,\n    private twoSrc: InformationType<boolean>,\n  ) {\n    super(oneSrc, twoSrc);\n  }\n\n  public value(o: OwnerType<boolean>): this {\n    new All(this.oneSrc, this.twoSrc).value(\n      new From(([one, two]) => {\n        o.give(one || two);\n      }),\n    );\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/boolean/not\n */\nexport class Not extends TheInformation<boolean> {\n  public constructor(private baseSrc: InformationType<boolean>) {\n    super(baseSrc);\n  }\n\n  public value(o: OwnerType<boolean>): this {\n    this.baseSrc.value(\n      new From((v) => {\n        o.give(!v);\n      }),\n    );\n    return this;\n  }\n}\n","import { Applied, InformationType, OwnerType, TheInformation } from \"silentium\";\n\n/**\n * Convert any source to boolean source\n * https://silentium-lab.github.io/silentium-components/#/boolean/bool\n */\nexport class Bool extends TheInformation<boolean> {\n  public constructor(private baseSrc: InformationType) {\n    super(baseSrc);\n  }\n\n  public value(o: OwnerType<boolean>): this {\n    new Applied(this.baseSrc, Boolean).value(o);\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"silentium\";\n\n/**\n * Represents object from json\n */\nexport class FromJson<T> extends TheInformation<T> {\n  public constructor(\n    private jsonSrc: InformationType<string>,\n    private errorOwner?: OwnerType,\n  ) {\n    super(jsonSrc);\n  }\n\n  public value(o: OwnerType<T>): this {\n    this.jsonSrc.value(\n      new From((json) => {\n        try {\n          o.give(JSON.parse(json));\n        } catch (error) {\n          this.errorOwner?.give(new Error(`Failed to parse JSON: ${error}`));\n        }\n      }),\n    );\n    return this;\n  }\n}\n","import { From, InformationType, OwnerType, TheInformation } from \"silentium\";\n\n/**\n * Represents json from object\n */\nexport class ToJson extends TheInformation<string> {\n  public constructor(\n    private dataSrc: InformationType,\n    private errorOwner?: OwnerType,\n  ) {\n    super(dataSrc);\n  }\n\n  public value(o: OwnerType<string>): this {\n    this.dataSrc.value(\n      new From((data: unknown) => {\n        try {\n          o.give(JSON.stringify(data));\n        } catch {\n          this.errorOwner?.give(new Error(\"Failed to convert to JSON\"));\n        }\n      }),\n    );\n    return this;\n  }\n}\n","import { Applied, InformationType, OwnerType, TheInformation } from \"silentium\";\n\n/**\n * Represents the first element of an array.\n */\nexport class First<T extends Array<unknown>> extends TheInformation<T[0]> {\n  public constructor(private baseSrc: InformationType<T>) {\n    super(baseSrc);\n  }\n\n  public value(o: OwnerType<T[0]>): this {\n    new Applied(this.baseSrc, (a) => a[0]).value(o);\n    return this;\n  }\n}\n"],"names":["Sync","TheInformation","constructor","baseSrc","super","this","__publicField","value","o","valueExisted","initOwner","isFilled","theValue","valueSync","Error","isInit","From","v","Branch","conditionSrc","leftSrc","rightSrc","leftSync","rightSync","give","Const","permanentValue","triggerSrc","Deadline","error","timeoutSrc","timerHead","s","Shared","addDep","timeout","clearTimeout","timeoutReached","setTimeout","f","Filtered","Deferred","baseSync","Dirty","baseEntitySource","alwaysKeep","excludeKeys","Late","comparingDetached","Applied","comparingSrc","JSON","parse","stringify","allSrc","All","comparing","base","Object","fromEntries","entries","filter","key","includes","Loading","loadingStartSrc","loadingFinishSrc","Lock","lockSrc","locked","newLock","i","Memo","lastValue","OnlyChanged","firstValue","Part","keySrc","MbInfo","keySync","keyChunks","split","forEach","keyChunk","Path","Polling","Shot","targetSrc","targetSync","Tick","microtaskScheduled","queueMicrotask","Task","delay","prevTimer","ExecutorApplied","fn","HashTable","record","RecordOf","recordSrc","values","keys","entry","index","Concatenated","sources","joinPartSrc","Of","joinPart","strings","join","Template","theSrc","placesSrc","source","$TPL","guest","varsSrc","vars","rules","ph","val","replaceAll","String","template","src","varName","placesCounter","BranchLazy","instances","length","instance","destroy","get","push","RegexpMatched","patternSrc","valueSrc","flagsSrc","pattern","flags","RegExp","test","RegexpReplaced","replaceValueSrc","replaceValue","replace","RegexpMatch","result","exec","Set","emptySrc","Lazy","Router","urlSrc","routesSrc","defaultSrc","routes","url","map","r","patternFlags","firstReal","find","And","oneSrc","twoSrc","one","two","Or","Not","Bool","Boolean","FromJson","jsonSrc","errorOwner","json","ToJson","dataSrc","data","First","a"],"mappings":"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"}