{"version":3,"file":"silentium-components.min.mjs","sources":["../src/behaviors/Branch.ts","../src/behaviors/Const.ts","../src/behaviors/Deadline.ts","../src/behaviors/Deferred.ts","../src/behaviors/Detached.ts","../src/behaviors/Dirty.ts","../src/behaviors/Loading.ts","../src/behaviors/Lock.ts","../src/behaviors/Memo.ts","../src/behaviors/OnlyChanged.ts","../src/behaviors/Part.ts","../src/behaviors/Path.ts","../src/behaviors/Polling.ts","../src/behaviors/Shot.ts","../src/behaviors/Task.ts","../src/behaviors/Tick.ts","../src/structures/HashTable.ts","../src/structures/RecordOf.ts","../src/strings/Concatenated.ts","../src/strings/Template.ts","../src/system/RegexpMatched.ts","../src/system/RegexpReplaced.ts","../src/system/RegexpMatch.ts","../src/system/Set.ts","../src/navigation/Router.ts","../src/behaviors/BranchLazy.ts","../src/boolean/And.ts","../src/boolean/Or.ts","../src/boolean/Not.ts","../src/boolean/Bool.ts","../src/formats/FromJson.ts","../src/formats/ToJson.ts","../src/lists/First.ts"],"sourcesContent":["import { EventType, primitive } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/branch\n */\nexport const branch = <Then, Else>(\n  conditionSrc: EventType<boolean>,\n  leftSrc: EventType<Then>,\n  rightSrc?: EventType<Else>,\n): EventType<Then | Else> => {\n  return (u) => {\n    const leftSync = primitive(leftSrc);\n    let rightSync: ReturnType<typeof primitive<Else>>;\n\n    if (rightSrc !== undefined) {\n      rightSync = primitive(rightSrc);\n    }\n\n    conditionSrc((v) => {\n      let result: Then | Else | null = null;\n      if (v) {\n        result = leftSync.primitive();\n      } else if (rightSync) {\n        result = rightSync.primitive();\n      }\n\n      if (result !== null) {\n        u(result);\n      }\n    });\n  };\n};\n","import { EventType } from \"silentium\";\n\nexport const constant = <T>(\n  permanentValue: T,\n  triggerSrc: EventType,\n): EventType<T> => {\n  return (u) => {\n    triggerSrc(() => {\n      u(permanentValue);\n    });\n  };\n};\n","import { EventType, filtered, shared, EventUserType } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/path\n */\nexport const deadline = <T>(\n  error: EventUserType<Error>,\n  baseSrc: EventType<T>,\n  timeoutSrc: EventType<number>,\n): EventType<T> => {\n  return (u) => {\n    let timerHead: unknown = null;\n\n    const s = shared(baseSrc, true);\n\n    timeoutSrc((timeout) => {\n      if (timerHead) {\n        clearTimeout(timerHead as number);\n      }\n      let timeoutReached = false;\n\n      timerHead = setTimeout(() => {\n        if (timeoutReached) {\n          return;\n        }\n        timeoutReached = true;\n        error(new Error(\"Timeout reached in Deadline class\"));\n      }, timeout);\n\n      const f = filtered(s.event, () => !timeoutReached);\n      f(u);\n\n      s.event(() => {\n        timeoutReached = true;\n      });\n    });\n  };\n};\n","import { EventType, isFilled, primitive } from \"silentium\";\n\n/**\n * Defer one source after another, gives values of baseSrc only when triggerSrc responds\n * https://silentium-lab.github.io/silentium-components/#/behaviors/deferred\n */\nexport const deferred = <T>(\n  baseSrc: EventType<T>,\n  triggerSrc: EventType<unknown>,\n): EventType<T> => {\n  return (u) => {\n    const baseSync = primitive(baseSrc);\n    triggerSrc(() => {\n      const value = baseSync.primitive();\n      if (isFilled(value)) {\n        u(value);\n      }\n    });\n  };\n};\n","import { EventType, isFilled, primitive } from \"silentium\";\n\nexport const detached = <T>(baseSrc: EventType<T>): EventType<T> => {\n  return function Detached(user) {\n    const v = primitive(baseSrc).primitive();\n    if (isFilled(v)) {\n      user(v);\n    }\n  };\n};\n","import { all, applied, EventType, late, SourceType } from \"silentium\";\n\n/**\n * Takes source and remember it first value\n * returns new record, what will contain only fields what was changed\n * https://silentium-lab.github.io/silentium-components/#/behaviors/dirty\n */\nexport const dirty = <T>(\n  baseEntitySource: EventType<T>,\n  alwaysKeep: string[] = [],\n  excludeKeys: string[] = [],\n  cloneFn?: (v: T) => T,\n): SourceType<T> => {\n  const comparingSrc = late<T>();\n\n  if (cloneFn === undefined) {\n    cloneFn = (value) => JSON.parse(JSON.stringify(value));\n  }\n\n  return {\n    event: (u) => {\n      const comparingDetached = applied(comparingSrc.event, cloneFn);\n\n      all(\n        comparingDetached,\n        baseEntitySource,\n      )(([comparing, base]) => {\n        if (!comparing) {\n          return;\n        }\n\n        u(\n          Object.fromEntries(\n            Object.entries(comparing).filter(([key, value]) => {\n              if (alwaysKeep.includes(key)) {\n                return true;\n              }\n              if (excludeKeys.includes(key)) {\n                return false;\n              }\n              return value !== (base as any)[key];\n            }),\n          ) as T,\n        );\n      });\n    },\n    use: (v) => {\n      comparingSrc.use(v);\n    },\n  };\n};\n","import { EventType } from \"silentium\";\n\n/**\n * Representation of loading process\n * first informatin source begins loading\n * second information source stops loading\n * https://silentium-lab.github.io/silentium-components/#/behaviors/loading\n */\nexport const loading = (\n  loadingStartSrc: EventType<unknown>,\n  loadingFinishSrc: EventType<unknown>,\n): EventType<boolean> => {\n  return (u) => {\n    loadingStartSrc(() => u(true));\n    loadingFinishSrc(() => u(false));\n  };\n};\n","import { EventType, filtered } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/lock\n */\nexport const lock = <T>(\n  baseSrc: EventType<T>,\n  lockSrc: EventType<boolean>,\n): EventType<T> => {\n  return (u) => {\n    let locked = false;\n    lockSrc((newLock) => {\n      locked = newLock;\n    });\n    const i = filtered(baseSrc, () => !locked);\n    i(u);\n  };\n};\n","import { EventType } from \"silentium\";\n\n/**\n * Didn't respond if new value of baseSrc equals to old value\n * https://silentium-lab.github.io/silentium-components/#/behaviors/memo\n */\nexport const memo = <T>(baseSrc: EventType<T>): EventType<T> => {\n  return (u) => {\n    let lastValue: T | null = null;\n\n    baseSrc((v) => {\n      if (v !== lastValue) {\n        u(v);\n        lastValue = v;\n      }\n    });\n  };\n};\n","import { EventType } from \"silentium\";\n\n/**\n * Represents source what was changed at least once\n * https://silentium-lab.github.io/silentium-components/#/behaviors/only-changed\n */\nexport const onlyChanged = <T>(baseSrc: EventType<T>): EventType<T> => {\n  return (u) => {\n    let firstValue = false;\n\n    baseSrc((v) => {\n      if (firstValue === false) {\n        firstValue = true;\n      } else {\n        u(v);\n      }\n    });\n  };\n};\n","import { all, EventType, isFilled, primitive, SourceType } from \"silentium\";\n\n/**\n * Return source of record path\n * https://silentium-lab.github.io/silentium-components/#/behaviors/path\n */\nexport const part = <\n  R,\n  T extends Record<string, unknown> | Array<unknown> = any,\n  K extends string = any,\n>(\n  baseSrc: SourceType<T>,\n  keySrc: EventType<K>,\n): SourceType<R> => {\n  const baseSync = primitive(baseSrc.event);\n  const keySync = primitive(keySrc);\n  return {\n    event: (u) => {\n      all(\n        baseSrc.event,\n        keySrc,\n      )(([base, key]) => {\n        const keyChunks = key.split(\".\");\n        let value: unknown = base;\n        keyChunks.forEach((keyChunk) => {\n          value = (value as Record<string, unknown>)[keyChunk];\n        });\n\n        if (value !== undefined && value !== base) {\n          u(value as R);\n        }\n      });\n    },\n    use: (value: R) => {\n      const key = keySync.primitive();\n      if (isFilled(key)) {\n        baseSrc.use({\n          ...baseSync.primitive(),\n          [key]: value,\n        } as T);\n      }\n    },\n  };\n};\n","import { all, EventType } from \"silentium\";\n\n/**\n * Return source of record path\n * https://silentium-lab.github.io/silentium-components/#/behaviors/path\n */\nexport const path = <\n  R,\n  T extends Record<string, unknown> | Array<unknown> = any,\n  K extends string = any,\n>(\n  baseSrc: EventType<T>,\n  keySrc: EventType<K>,\n): EventType<R> => {\n  return (u) => {\n    all(\n      baseSrc,\n      keySrc,\n    )(([base, key]) => {\n      const keyChunks = key.split(\".\");\n      let value: unknown = base;\n      keyChunks.forEach((keyChunk) => {\n        value = (value as Record<string, unknown>)[keyChunk];\n      });\n\n      if (value !== undefined && value !== base) {\n        u(value as R);\n      }\n    });\n  };\n};\n","import { EventType } from \"silentium\";\n\nexport const polling = <T>(\n  baseSrc: EventType<T>,\n  triggerSrc: EventType<T>,\n): EventType<T> => {\n  return (u) => {\n    triggerSrc(() => {\n      baseSrc(u);\n    });\n  };\n};\n","import { EventType, isFilled, primitive } from \"silentium\";\n\n/**\n * Helps to represent only last fresh value of some source, refreshing controls by shotSrc\n * https://silentium-lab.github.io/silentium-components/#/behaviors/shot\n */\nexport const shot = <T>(\n  targetSrc: EventType<T>,\n  triggerSrc: EventType,\n): EventType<T> => {\n  return (u) => {\n    const targetSync = primitive(targetSrc);\n\n    triggerSrc(() => {\n      const value = targetSync.primitive();\n      if (isFilled(value)) {\n        u(value);\n      }\n    });\n  };\n};\n","import { EventType, executorApplied } from \"silentium\";\n\nexport const task = <T>(\n  baseSrc: EventType<T>,\n  delay: number = 0,\n): EventType<T> => {\n  return (u) => {\n    let prevTimer: unknown | null = null;\n    executorApplied(baseSrc, (fn) => {\n      return (v) => {\n        if (prevTimer) {\n          clearTimeout(prevTimer as number);\n        }\n        prevTimer = setTimeout(() => {\n          fn(v);\n        }, delay);\n      };\n    })(u);\n  };\n};\n","import { EventType } from \"silentium\";\n\n/**\n * Accumulates the last value of the source and returns one result once per tick\n * https://silentium-lab.github.io/silentium-components/#/behaviors/tick\n */\nexport const tick = <T>(baseSrc: EventType<T>): EventType<T> => {\n  return (u) => {\n    let microtaskScheduled = false;\n    let lastValue: T | null = null;\n\n    const scheduleMicrotask = () => {\n      microtaskScheduled = true;\n      queueMicrotask(() => {\n        microtaskScheduled = false;\n        if (lastValue !== null) {\n          u(lastValue);\n          lastValue = null;\n        }\n      });\n    };\n\n    baseSrc((v) => {\n      lastValue = v;\n      if (!microtaskScheduled) {\n        scheduleMicrotask();\n      }\n    });\n  };\n};\n","import { EventType } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/structures/hash-table\n */\nexport const hashTable = <T>(\n  baseSrc: EventType<[string, unknown]>,\n): EventType<T> => {\n  return (u) => {\n    const record: Record<string, unknown> = {};\n\n    baseSrc(([key, value]) => {\n      record[key] = value;\n      u(record as T);\n    });\n  };\n};\n","import { all, EventType } from \"silentium\";\n\ntype UnInformation<T> = T extends EventType<infer U> ? U : never;\n\n/**\n * Returns record of data from record of sources\n * https://silentium-lab.github.io/silentium-components/#/structures/record\n */\nexport const recordOf = <T extends EventType>(\n  recordSrc: Record<string, T>,\n): EventType<Record<string, UnInformation<T>>> => {\n  return (u) => {\n    const keys = Object.keys(recordSrc);\n    all(...Object.values(recordSrc))((entries) => {\n      const record: Record<string, any> = {};\n      entries.forEach((entry, index) => {\n        record[keys[index]] = entry;\n      });\n      u(record);\n    });\n  };\n};\n","import { all, EventType, of } from \"silentium\";\n\n/**\n * Join sources of strings to one source\n * https://silentium-lab.github.io/silentium-components/#/string/concatenated\n */\nexport const concatenated = (\n  sources: EventType<string>[],\n  joinPartSrc: EventType<string> = of(\"\"),\n): EventType<string> => {\n  return (u) => {\n    all(\n      joinPartSrc,\n      ...sources,\n    )(([joinPart, ...strings]) => {\n      u(strings.join(joinPart));\n    });\n  };\n};\n","import {\n  all,\n  applied,\n  EventType,\n  destructor,\n  DestructorType,\n  of,\n} from \"silentium\";\nimport { recordOf } from \"../structures\";\n\nexport const template = (\n  theSrc: EventType<string> = of(\"\"),\n  placesSrc: EventType<Record<string, unknown>> = of({}),\n) => {\n  let placesCounter = 0;\n  const vars: Record<string, EventType> = {\n    $TPL: of(\"$TPL\"),\n  };\n  const destructors: DestructorType[] = [];\n  return {\n    value: <EventType<string>>((u) => {\n      const varsSrc = recordOf(vars);\n      applied(all(theSrc, placesSrc, varsSrc), ([base, rules, vars]) => {\n        Object.entries(rules).forEach(([ph, val]) => {\n          base = base.replaceAll(ph, String(val));\n        });\n        Object.entries(vars).forEach(([ph, val]) => {\n          base = base.replaceAll(ph, String(val));\n        });\n\n        return base;\n      })(u);\n    }),\n    template: (value: string) => {\n      theSrc = of(value);\n    },\n    /**\n     * Ability to register variable\n     * in concrete place of template\n     */\n    var: (src: EventType<string>) => {\n      const varName = `$var${placesCounter}`;\n      placesCounter += 1;\n      vars[varName] = destructor(src, (d: DestructorType) => {\n        destructors.push(d);\n      }).value;\n      return varName;\n    },\n    destroy() {\n      destructors.forEach((d) => d());\n    },\n  };\n};\n","import { all, EventType, of } from \"silentium\";\n\n/**\n * Boolean source what checks what string matches pattern\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-matched\n */\nexport const regexpMatched = (\n  patternSrc: EventType<string>,\n  valueSrc: EventType<string>,\n  flagsSrc: EventType<string> = of(\"\"),\n): EventType<boolean> => {\n  return (u) => {\n    all(\n      patternSrc,\n      valueSrc,\n      flagsSrc,\n    )(([pattern, value, flags]) => {\n      u(new RegExp(pattern, flags).test(value));\n    });\n  };\n};\n","import { all, EventType, of } from \"silentium\";\n\n/**\n * Returns string replaced by regular expression pattern\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-replaced\n */\nexport const regexpReplaced = (\n  valueSrc: EventType<string>,\n  patternSrc: EventType<string>,\n  replaceValueSrc: EventType<string>,\n  flagsSrc: EventType<string> = of(\"\"),\n): EventType<string> => {\n  return (u) => {\n    all(\n      patternSrc,\n      valueSrc,\n      replaceValueSrc,\n      flagsSrc,\n    )(([pattern, value, replaceValue, flags]) => {\n      u(String(value).replace(new RegExp(pattern, flags), replaceValue));\n    });\n  };\n};\n","import { all, EventType, of } from \"silentium\";\n\n/**\n * First match of regexp\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-matched\n */\nexport const regexpMatch = (\n  patternSrc: EventType<string>,\n  valueSrc: EventType<string>,\n  flagsSrc: EventType<string> = of(\"\"),\n): EventType<string[]> => {\n  return (u) => {\n    all(\n      patternSrc,\n      valueSrc,\n      flagsSrc,\n    )(([pattern, value, flags]) => {\n      const result = new RegExp(pattern, flags).exec(value);\n      u(result ?? []);\n    });\n  };\n};\n","import { all, EventType } from \"silentium\";\n\n/**\n * Ability to mutate some object, helpful when integrate to procedure systems\n * https://silentium-lab.github.io/silentium-components/#/system/set\n */\nexport const set = <T extends Record<string, unknown>>(\n  baseSrc: EventType<T>,\n  keySrc: EventType<string>,\n  valueSrc: EventType<unknown>,\n): EventType<T> => {\n  return (u) => {\n    all(\n      baseSrc,\n      keySrc,\n      valueSrc,\n    )(([base, key, value]) => {\n      (base as Record<string, unknown>)[key] = value;\n      u(base);\n    });\n  };\n};\n","import {\n  all,\n  applied,\n  EventType,\n  destructor,\n  DestructorType,\n  of,\n  ConstructorType,\n} from \"silentium\";\nimport { branchLazy } from \"../behaviors/BranchLazy\";\nimport { regexpMatched } from \"../system\";\n\nexport interface Route<T> {\n  pattern: string;\n  patternFlags?: string;\n  template: ConstructorType<[], EventType<T>>;\n}\n\nconst emptySrc = () => of(false);\n\n/**\n * Router component what will return template if url matches pattern\n * https://silentium-lab.github.io/silentium-components/#/navigation/router\n */\nexport const router = <T = \"string\">(\n  urlSrc: EventType<string>,\n  routesSrc: EventType<Route<T>[]>,\n  defaultSrc: ConstructorType<[], EventType<T>>,\n): EventType<T> => {\n  return (u) => {\n    const destructors: DestructorType[] = [];\n    const destroyAllData = () => {\n      destructors.forEach((d) => d());\n      destructors.length = 0;\n    };\n    all(\n      routesSrc,\n      urlSrc,\n    )(([routes, url]) => {\n      destroyAllData();\n      const instance = all(\n        defaultSrc(),\n        all(\n          ...routes.map(\n            (r) =>\n              destructor(\n                branchLazy(\n                  regexpMatched(\n                    of(r.pattern),\n                    of(url),\n                    r.patternFlags ? of(r.patternFlags) : undefined,\n                  ),\n                  r.template,\n                  emptySrc,\n                ),\n                (d: DestructorType) => destructors.push(d),\n              ).value,\n          ),\n        ),\n      );\n\n      // Return first not false or default\n      applied(instance, (r) => {\n        const firstReal = r[1].find((r) => r !== false);\n\n        if (firstReal) {\n          return firstReal as T;\n        }\n\n        return r[0];\n      })(u);\n    });\n\n    return destroyAllData;\n  };\n};\n","import { EventType, DestructorType, ConstructorType } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/branch\n */\nexport const branchLazy = <Then, Else>(\n  conditionSrc: EventType<boolean>,\n  leftSrc: ConstructorType<[], EventType<Then>>,\n  rightSrc?: ConstructorType<[], EventType<Else>>,\n): EventType<Then | Else> => {\n  return (u) => {\n    let destructor: DestructorType | void;\n    conditionSrc((v) => {\n      if (destructor !== undefined && typeof destructor === \"function\") {\n        destructor();\n      }\n      let instance: EventType<Then | Else> | null = null;\n      if (v) {\n        instance = leftSrc();\n      } else if (rightSrc) {\n        instance = rightSrc();\n      }\n      if (instance) {\n        destructor = instance(u);\n      }\n    });\n\n    return () => {\n      destructor?.();\n    };\n  };\n};\n","import { all, EventType } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/boolean/and\n */\nexport const and = (\n  oneSrc: EventType<boolean>,\n  twoSrc: EventType<boolean>,\n): EventType<boolean> => {\n  return (u) => {\n    all(\n      oneSrc,\n      twoSrc,\n    )(([one, two]) => {\n      u(one && two);\n    });\n  };\n};\n","import { all, EventType } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/boolean/or\n */\nexport const or = (\n  oneSrc: EventType<boolean>,\n  twoSrc: EventType<boolean>,\n): EventType<boolean> => {\n  return (u) => {\n    all(\n      oneSrc,\n      twoSrc,\n    )(([one, two]) => {\n      u(one || two);\n    });\n  };\n};\n","import { EventType } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/boolean/not\n */\nexport const not = (baseSrc: EventType<boolean>): EventType<boolean> => {\n  return (u) => {\n    baseSrc((v) => {\n      u(!v);\n    });\n  };\n};\n","import { applied, EventType } from \"silentium\";\n\n/**\n * Convert any source to boolean source\n * https://silentium-lab.github.io/silentium-components/#/boolean/bool\n */\nexport const bool = (baseSrc: EventType): EventType<boolean> => {\n  return (u) => {\n    applied(baseSrc, Boolean)(u);\n  };\n};\n","import { EventType, EventUserType } from \"silentium\";\n\n/**\n * Represents object from json\n */\nexport const fromJson = <T = Record<string, unknown>>(\n  jsonSrc: EventType<string>,\n  errorOwner?: EventUserType,\n): EventType<T> => {\n  return (u) => {\n    jsonSrc((json) => {\n      try {\n        u(JSON.parse(json));\n      } catch (error) {\n        errorOwner?.(new Error(`Failed to parse JSON: ${error}`));\n      }\n    });\n  };\n};\n","import { EventType, EventUserType } from \"silentium\";\n\n/**\n * Represents json from object\n */\nexport const toJson = (\n  dataSrc: EventType,\n  errorOwner?: EventUserType,\n): EventType<string> => {\n  return (u) => {\n    dataSrc((data: unknown) => {\n      try {\n        u(JSON.stringify(data));\n      } catch {\n        errorOwner?.(new Error(\"Failed to convert to JSON\"));\n      }\n    });\n  };\n};\n","import { applied, EventType } from \"silentium\";\n\n/**\n * Represents the first element of an array.\n */\nexport const first = <T extends Array<unknown>>(\n  baseSrc: EventType<T>,\n): EventType<T[0]> => {\n  return (u) => {\n    applied(baseSrc, (a) => a[0])(u);\n  };\n};\n"],"names":["branch","conditionSrc","leftSrc","rightSrc","u","leftSync","primitive","rightSync","v","result","constant","permanentValue","triggerSrc","deadline","error","baseSrc","timeoutSrc","timerHead","s","shared","timeout","clearTimeout","timeoutReached","setTimeout","Error","filtered","event","f","deferred","baseSync","value","isFilled","detached","user","dirty","baseEntitySource","alwaysKeep","excludeKeys","cloneFn","comparingSrc","late","JSON","parse","stringify","comparingDetached","applied","all","comparing","base","Object","fromEntries","entries","filter","key","includes","use","loading","loadingStartSrc","loadingFinishSrc","lock","lockSrc","locked","newLock","i","memo","lastValue","onlyChanged","firstValue","part","keySrc","keySync","keyChunks","split","forEach","keyChunk","path","polling","shot","targetSrc","targetSync","task","delay","prevTimer","executorApplied","fn","tick","microtaskScheduled","queueMicrotask","hashTable","record","recordOf","recordSrc","keys","values","entry","index","concatenated","sources","joinPartSrc","of","joinPart","strings","join","template","theSrc","placesSrc","placesCounter","vars","$TPL","destructors","varsSrc","rules","ph","val","replaceAll","String","var","src","varName","destructor","d","push","destroy","regexpMatched","patternSrc","valueSrc","flagsSrc","pattern","flags","RegExp","test","regexpReplaced","replaceValueSrc","replaceValue","replace","regexpMatch","exec","set","emptySrc","router","urlSrc","routesSrc","defaultSrc","destroyAllData","length","routes","url","instance","map","r","patternFlags","firstReal","find","and","oneSrc","twoSrc","one","two","or","not","bool","Boolean","fromJson","jsonSrc","errorOwner","json","toJson","dataSrc","data","first","a"],"mappings":"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"}