{"version":3,"file":"silentium-components.cjs","sources":["../src/behaviors/Dirty.ts","../src/behaviors/Loading.ts","../src/behaviors/Path.ts","../src/behaviors/Deadline.ts","../src/behaviors/Tick.ts","../src/behaviors/Sync.ts","../src/behaviors/Deferred.ts","../src/behaviors/Branch.ts","../src/behaviors/Memo.ts","../src/behaviors/Lock.ts","../src/behaviors/Shot.ts","../src/behaviors/OnlyChanged.ts","../src/structures/HashTable.ts","../src/structures/Record.ts","../src/strings/Concatenated.ts","../src/system/RegexpMatched.ts","../src/navigation/Router.ts","../src/system/RegexpReplaced.ts","../src/system/RegexpMatch.ts","../src/system/Set.ts","../src/boolean/And.ts","../src/boolean/Or.ts","../src/boolean/Not.ts","../src/formats/FromJson.ts","../src/formats/ToJson.ts","../src/lists/First.ts"],"sourcesContent":["import { all, applied, InformationType, of } from \"silentium\";\n\n/**\n * Takes source and remember it first value\n * returns new record, what will contain only fields what was changed\n * https://silentium-lab.github.io/silentium-components/#/behaviors/dirty\n */\nexport const dirty = <T extends object>(\n  baseEntitySource: InformationType<T>,\n  alwaysKeep: string[] = [],\n  excludeKeys: string[] = [],\n) => {\n  const [comparing, co] = of<T>();\n\n  const comparingDetached = applied(comparing, (value) =>\n    JSON.parse(JSON.stringify(value)),\n  );\n\n  const i: InformationType<Partial<T>> = (o) => {\n    all(\n      comparingDetached,\n      baseEntitySource,\n    )(([comparing, base]) => {\n      if (!comparing) {\n        return;\n      }\n\n      o(\n        Object.fromEntries(\n          Object.entries(comparing).filter(([key, value]) => {\n            if (alwaysKeep.includes(key)) {\n              return true;\n            }\n            if (excludeKeys.includes(key)) {\n              return false;\n            }\n            return value !== (base as any)[key];\n          }),\n        ) as T,\n      );\n    });\n  };\n\n  return [i, co] as const;\n};\n","import { InformationType } from \"silentium\";\n\n/**\n * Representation of loading process\n * first informatin source begins loading\n * second information source stops loading\n * https://silentium-lab.github.io/silentium-components/#/behaviors/loading\n */\nexport const loading = (\n  loadingStartSource: InformationType<unknown>,\n  loadingFinishSource: InformationType<unknown>,\n): InformationType<boolean> => {\n  return (o) => {\n    loadingStartSource(() => {\n      o(true);\n    });\n\n    loadingFinishSource(() => {\n      o(false);\n    });\n  };\n};\n","import { all, InformationType } from \"silentium\";\n\n/**\n * Return source of record path\n * https://silentium-lab.github.io/silentium-components/#/behaviors/path\n */\nexport const path = <\n  R,\n  T extends Record<string, unknown> | Array<unknown> = any,\n  K extends string = any,\n>(\n  baseSrc: InformationType<T>,\n  keySrc: InformationType<K>,\n): InformationType<R> => {\n  return (o) => {\n    all(\n      baseSrc,\n      keySrc,\n    )(([base, key]) => {\n      const keyChunks = key.split(\".\");\n      let value: unknown = base;\n      keyChunks.forEach((keyChunk) => {\n        value = (value as Record<string, unknown>)[keyChunk];\n      });\n\n      if (value !== undefined && value !== base) {\n        o(value as R);\n      }\n    });\n  };\n};\n","import {\n  filtered,\n  InformationType,\n  OwnerType,\n  sharedStateless,\n} from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/path\n */\nexport const deadline = <T>(\n  error: OwnerType<Error>,\n  baseSrc: InformationType<T>,\n  timeoutSrc: InformationType<number>,\n): InformationType<T> => {\n  let timerHead: unknown = null;\n  return (o) => {\n    const [baseShared, pool] = sharedStateless(baseSrc);\n\n    timeoutSrc((timeout) => {\n      if (timerHead) {\n        clearTimeout(timerHead as number);\n      }\n      let timeoutReached = false;\n\n      timerHead = setTimeout(() => {\n        if (timeoutReached) {\n          return;\n        }\n        timeoutReached = true;\n        error(new Error(\"Timeout reached in Deadline class\"));\n      }, timeout);\n\n      const f = filtered(baseShared, () => !timeoutReached);\n      f(o);\n\n      baseShared(() => {\n        timeoutReached = true;\n      });\n    });\n\n    return () => {\n      pool.destroy();\n    };\n  };\n};\n","import { InformationType } from \"silentium\";\n\n/**\n * Accumulates the last value of the source and returns one result once per tick\n * https://silentium-lab.github.io/silentium-components/#/behaviors/tick\n */\nexport const tick = <T>(baseSrc: InformationType<T>): InformationType<T> => {\n  return (o) => {\n    let microtaskScheduled = false;\n    let lastValue: T | null = null;\n\n    const scheduleMicrotask = () => {\n      microtaskScheduled = true;\n      queueMicrotask(() => {\n        microtaskScheduled = false;\n        if (lastValue !== null) {\n          o(lastValue);\n          lastValue = null;\n        }\n      });\n    };\n\n    baseSrc((v) => {\n      lastValue = v;\n      if (!microtaskScheduled) {\n        scheduleMicrotask();\n      }\n    });\n  };\n};\n","import { InformationType } from \"silentium\";\n\nexport const sync = <T>(base: InformationType<T>) => {\n  let value: T | undefined;\n\n  base((v) => {\n    value = v;\n  });\n\n  return {\n    value() {\n      if (value === undefined) {\n        throw new Error(\"no value in sync\");\n      }\n\n      return value;\n    },\n  };\n};\n","import { InformationType, isFilled } from \"silentium\";\nimport { sync } from \"./Sync\";\n\n/**\n * Defer one source after another, gives values of baseSrc only once when triggerSrc responds\n * https://silentium-lab.github.io/silentium-components/#/behaviors/deferred\n */\nexport const deferred = <T>(\n  baseSrc: InformationType<T>,\n  triggerSrc: InformationType<unknown>,\n): InformationType<T> => {\n  return (o) => {\n    const baseSync = sync(baseSrc);\n\n    triggerSrc(() => {\n      if (isFilled(baseSync.value())) {\n        o(baseSync.value());\n      }\n    });\n  };\n};\n","import { InformationType } from \"silentium\";\nimport { sync } from \"./Sync\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/branch\n */\nexport const branch = <Then, Else>(\n  condition: InformationType<boolean>,\n  left: InformationType<Then>,\n  right?: InformationType<Else>,\n): InformationType<Then | Else> => {\n  return (o) => {\n    const leftSync = sync(left);\n    let rightSync: { value: () => Else };\n\n    if (right !== undefined) {\n      rightSync = sync(right);\n    }\n\n    condition((v) => {\n      if (v) {\n        o(leftSync.value());\n      } else if (rightSync) {\n        o(rightSync.value());\n      }\n    });\n  };\n};\n","import { InformationType } from \"silentium\";\n\n/**\n * Didn't respond if new value of baseSrc equals to old value\n * https://silentium-lab.github.io/silentium-components/#/behaviors/memo\n */\nexport const memo = <T>(baseSrc: InformationType<T>): InformationType<T> => {\n  let lastValue: T | null = null;\n\n  return (o) => {\n    baseSrc((v) => {\n      if (v !== lastValue) {\n        o(v);\n        lastValue = v;\n      }\n    });\n  };\n};\n","import { filtered, InformationType } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/lock\n */\nexport const lock = <T>(\n  baseSrc: InformationType<T>,\n  lockSrc: InformationType<boolean>,\n): InformationType<T> => {\n  let locked = false;\n  const i = filtered(baseSrc, () => !locked);\n\n  return (o) => {\n    lockSrc((newLock) => {\n      locked = newLock;\n    });\n    i(o);\n  };\n};\n","import { InformationType, isFilled } from \"silentium\";\nimport { sync } from \"./Sync\";\n\n/**\n * Helps to represent only last fresh value of some source, refreshing controls by shotSrc\n * https://silentium-lab.github.io/silentium-components/#/behaviors/shot\n */\nexport const shot = <T>(\n  targetSrc: InformationType<T>,\n  triggerSrc: InformationType,\n): InformationType<T> => {\n  return (o) => {\n    const targetSync = sync(targetSrc);\n\n    triggerSrc(() => {\n      if (isFilled(targetSync.value())) {\n        o(targetSync.value());\n      }\n    });\n  };\n};\n","import { InformationType } from \"silentium\";\n\n/**\n * Represents source what was changed at least once\n * https://silentium-lab.github.io/silentium-components/#/behaviors/only-changed\n */\nexport const onlyChanged = <T>(\n  baseSrc: InformationType<T>,\n): InformationType<T> => {\n  let firstValue = false;\n  return (o) => {\n    baseSrc((v) => {\n      if (firstValue === false) {\n        firstValue = true;\n      } else {\n        o(v);\n      }\n    });\n  };\n};\n","import { InformationType } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/structures/hash-table\n */\nexport const hashTable = <T>(\n  base: InformationType<[string, unknown]>,\n): InformationType<T> => {\n  return (o) => {\n    const record: Record<string, unknown> = {};\n\n    base(([key, value]) => {\n      record[key] = value;\n      o(record as T);\n    });\n  };\n};\n","import { all, InformationType } from \"silentium\";\n\ntype UnInformation<T> = T extends InformationType<infer U> ? U : never;\n\n/**\n * Returns record of data from record of sources\n * https://silentium-lab.github.io/silentium-components/#/structures/record\n */\nexport const record = <T extends InformationType>(\n  recordSrc: Record<string, T>,\n): InformationType<Record<string, UnInformation<T>>> => {\n  return (o) => {\n    const keys = Object.keys(recordSrc);\n    all(...Object.values(recordSrc))((entries) => {\n      const record: Record<string, any> = {};\n      entries.forEach((entry, index) => {\n        record[keys[index]] = entry;\n      });\n      o(record);\n    });\n  };\n};\n","import { all, i, InformationType } from \"silentium\";\n\n/**\n * Join sources of strings to one source\n * https://silentium-lab.github.io/silentium-components/#/string/concatenated\n */\nexport const concatenated = (\n  sources: InformationType<string>[],\n  joinPartSrc: InformationType<string> = i(\"\"),\n): InformationType<string> => {\n  return (o) => {\n    all(\n      joinPartSrc,\n      ...sources,\n    )(([joinPart, ...strings]) => {\n      o(strings.join(joinPart));\n    });\n  };\n};\n","import { all, i, InformationType } from \"silentium\";\n\n/**\n * Boolean source what checks what string matches pattern\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-matched\n */\nexport const regexpMatched =\n  (\n    patternSrc: InformationType<string>,\n    valueSrc: InformationType<string>,\n    flagsSrc: InformationType<string> = i(\"\"),\n  ): InformationType<boolean> =>\n  (o) => {\n    all(\n      patternSrc,\n      valueSrc,\n      flagsSrc,\n    )(([pattern, value, flags]) => {\n      o(new RegExp(pattern, flags).test(value));\n    });\n  };\n","import { any, chain, i, InformationType, OwnerType } from \"silentium\";\nimport { branch } from \"../behaviors\";\nimport { regexpMatched } from \"../system/RegexpMatched\";\n\nexport interface Route<T> {\n  pattern: string;\n  patternFlags?: string;\n  template: T | InformationType<T>;\n}\n\n/**\n * Router component what will return template if url matches pattern\n * https://silentium-lab.github.io/silentium-components/#/navigation/router\n */\nexport const router = <T = \"string\">(\n  urlSrc: InformationType<string>,\n  routesSrc: InformationType<Route<T>[]>,\n  defaultSrc: InformationType<T>,\n): InformationType<T> => {\n  return (o) => {\n    routesSrc((routes) => {\n      any(\n        chain(urlSrc, defaultSrc),\n        ...routes.map((r) => {\n          return branch(\n            regexpMatched(\n              i(r.pattern),\n              urlSrc,\n              r.patternFlags ? i(r.patternFlags) : undefined,\n            ),\n            (typeof r.template === \"function\"\n              ? r.template\n              : i(r.template)) as InformationType,\n          );\n        }),\n      )(o as OwnerType<unknown>);\n    });\n  };\n};\n","import { all, i, InformationType } from \"silentium\";\n\n/**\n * Returns string replaced by regular expression pattern\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-replaced\n */\nexport const regexpReplaced =\n  (\n    valueSrc: InformationType<string>,\n    patternSrc: InformationType<string>,\n    replaceValueSrc: InformationType<string>,\n    flagsSrc: InformationType<string> = i(\"\"),\n  ): InformationType<string> =>\n  (o) => {\n    all(\n      patternSrc,\n      valueSrc,\n      replaceValueSrc,\n      flagsSrc,\n    )(([pattern, value, replaceValue, flags]) => {\n      o(String(value).replace(new RegExp(pattern, flags), replaceValue));\n    });\n  };\n","import { all, i, InformationType } from \"silentium\";\n\n/**\n * First match of regexp\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-matched\n */\nexport const regexpMatch =\n  (\n    patternSrc: InformationType<string>,\n    valueSrc: InformationType<string>,\n    flagsSrc: InformationType<string> = i(\"\"),\n  ): InformationType<string[]> =>\n  (o) => {\n    all(\n      patternSrc,\n      valueSrc,\n      flagsSrc,\n    )(([pattern, value, flags]) => {\n      const result = new RegExp(pattern, flags).exec(value);\n      o(result ?? []);\n    });\n  };\n","import { all, InformationType } from \"silentium\";\n\n/**\n * Ability to mutate some object, helpful when integrate to procedure systems\n * https://silentium-lab.github.io/silentium-components/#/system/set\n */\nexport const set = <T extends Record<string, unknown>>(\n  baseSrc: InformationType<T>,\n  keySrc: InformationType<string>,\n  valueSrc: InformationType<unknown>,\n): InformationType<T> => {\n  return (o) => {\n    all(\n      baseSrc,\n      keySrc,\n      valueSrc,\n    )(([base, key, value]) => {\n      (base as Record<string, unknown>)[key] = value;\n      o(base);\n    });\n  };\n};\n","import { all, InformationType } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/boolean/and\n */\nexport const and = (\n  oneSrc: InformationType<boolean>,\n  twoSrc: InformationType<boolean>,\n): InformationType<boolean> => {\n  return (o) => {\n    all(\n      oneSrc,\n      twoSrc,\n    )(([one, two]) => {\n      o(one && two);\n    });\n  };\n};\n","import { all, InformationType } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/boolean/or\n */\nexport const or = (\n  oneSrc: InformationType<boolean>,\n  twoSrc: InformationType<boolean>,\n): InformationType<boolean> => {\n  return (o) => {\n    all(\n      oneSrc,\n      twoSrc,\n    )(([one, two]) => {\n      o(one || two);\n    });\n  };\n};\n","import { InformationType } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/boolean/not\n */\nexport const not = (\n  baseSrc: InformationType<boolean>,\n): InformationType<boolean> => {\n  return (o) => {\n    baseSrc((v) => {\n      o(!v);\n    });\n  };\n};\n","import { InformationType, OwnerType } from \"silentium\";\n\n/**\n * Represents object from json\n */\nexport const fromJson = <T>(\n  jsonSrc: InformationType<string>,\n  errorOwner?: OwnerType,\n): InformationType<T> => {\n  return (o) => {\n    jsonSrc((json) => {\n      try {\n        o(JSON.parse(json));\n      } catch (error) {\n        errorOwner?.(new Error(`Failed to parse JSON: ${error}`));\n      }\n    });\n  };\n};\n","import { InformationType, OwnerType } from \"silentium\";\n\n/**\n * Repreresents json from object\n */\nexport const toJson = (\n  dataSrc: InformationType,\n  errorOwner?: OwnerType,\n): InformationType<string> => {\n  return (o) => {\n    dataSrc((data) => {\n      try {\n        o(JSON.stringify(data));\n      } catch {\n        errorOwner?.(new Error(\"Failed to convert to JSON\"));\n      }\n    });\n  };\n};\n","import { applied, InformationType } from \"silentium\";\n\n/**\n * Represents the first element of an array.\n */\nexport const first = <T extends Array<unknown>>(\n  baseSrc: InformationType<T>,\n): InformationType<T[0]> => {\n  return applied(baseSrc, (a) => a[0]);\n};\n"],"names":["of","applied","all","comparing","sharedStateless","filtered","isFilled","record","i","any","chain"],"mappings":"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"}