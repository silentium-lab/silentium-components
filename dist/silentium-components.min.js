!function(e,r){"use strict";const t=(e,t,o="")=>r.sourceCombined(e,t,o)(((e,t,o,u)=>{r.give(new RegExp(t,u).test(o),e)}));e.concatenated=(e,t="")=>r.sourceCombined(t,...e)(((e,t,...o)=>{r.give(o.join(t),e)})),e.deadline=(e,t,o)=>{let u=null;return a=>{r.value(o,r.guestCast(a,(o=>{u&&clearTimeout(u);let s=!1;u=setTimeout((()=>{s||(s=!0,r.give(new Error("Timeout reached in Deadline class"),e))}),o),r.value(r.sourceFiltered(t,(()=>!s)),a),r.value(t,r.patronOnce((()=>{s=!0})))})))}},e.dirty=(e,t=!1,o=[],u=[])=>{const a=r.sourceOf(),s=r.sourceAll([a,e]),n={give:e=>(r.give(JSON.parse(JSON.stringify(e)),a),n),value:e=>(r.value(s,r.guestCast(e,(([t,a])=>{t&&r.give(Object.fromEntries(Object.entries(t).filter((([e,r])=>!!o.includes(e)||!u.includes(e)&&r!==a[e]))),e)}))),n)};return t&&r.value(e,r.patronOnce(n)),n},e.fork=(e,t,o,u)=>{const a=r.sourceOf(),s=r.sourceOf(),n=r.sourceResettable(a,s);let l,c;return r.value(e,r.patron((e=>{s.give(1),l&&r.removePatronFromPools(l),c&&r.removePatronFromPools(c),t(e)?(l=r.patron(a),r.value(o,l)):u&&(c=r.patron(a),r.value(u,c))}))),n},e.groupActiveClass=(e,t,o)=>(r.value(r.sourceAll([e,t,o]),r.patron((([e,r,t])=>{t.forEach((r=>{r.classList&&r.classList.remove(e)})),r.classList.add(e)}))),o),e.hashTable=e=>{const t=r.sourceOf({});return r.subSource(t,e),r.value(e,r.patron((([e,r])=>{t.value((t=>{t[e]=r}))}))),t.value},e.loading=(e,t)=>{const o=r.sourceOf();return r.subSourceMany(o,[e,t]),r.value(e,r.patron((()=>{o.give(!0)}))),r.value(t,r.patron((()=>{o.give(!1)}))),o.value},e.path=(e,t)=>{const o=r.sourceOf();return r.subSourceMany(o,[e,t]),r.value(r.sourceAll([e,t]),r.patron((([e,t])=>{const u=t.split(".");let a=e;u.forEach((e=>{a=a[e]})),void 0!==a&&a!==e&&r.give(a,o)}))),o.value},e.record=e=>{const t=Object.keys(e);return r.sourceCombined(...Object.values(e))(((e,...o)=>{const u={};o.forEach(((e,r)=>{u[t[r]]=e})),r.give(u,e)}))},e.regexpMatched=t,e.regexpReplaced=(e,t,o,u="")=>r.sourceCombined(t,e,o,u)(((e,t,o,u,a)=>{r.give(String(o).replace(new RegExp(t,a),u),e)})),e.router=(e,o,u)=>{const a=r.sourceOf();return r.value(o,r.patron((o=>{r.value(r.sourceAny([r.sourceChain(e,u),...o.map((o=>r.sourceChain(r.sourceFiltered(t(o.pattern,e,o.patternFlags),Boolean),o.template)))]),r.patron(a))}))),a.value},e.tick=e=>{const t=r.sourceOf();r.subSource(t,e);let o=!1,u=null;return r.value(e,r.patron((e=>{u=e,o||(o=!0,queueMicrotask((()=>{o=!1,null!==u&&(r.give(u,t),u=null)})))}))),t}}({},silentium);
