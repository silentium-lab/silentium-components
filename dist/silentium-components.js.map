{"version":3,"file":"silentium-components.js","sources":["../src/behaviors/Branch.ts","../src/behaviors/Const.ts","../src/behaviors/Deadline.ts","../src/behaviors/Deferred.ts","../src/behaviors/Dirty.ts","../src/behaviors/Loading.ts","../src/behaviors/Lock.ts","../src/behaviors/Memo.ts","../src/behaviors/OnlyChanged.ts","../src/behaviors/Part.ts","../src/behaviors/Path.ts","../src/behaviors/Polling.ts","../src/behaviors/Shot.ts","../src/behaviors/Tick.ts","../src/behaviors/Task.ts","../src/structures/HashTable.ts","../src/structures/RecordOf.ts","../src/strings/Concatenated.ts","../src/strings/Template.ts","../src/behaviors/BranchLazy.ts","../src/system/RegexpMatched.ts","../src/system/RegexpReplaced.ts","../src/system/RegexpMatch.ts","../src/system/Set.ts","../src/navigation/Router.ts","../src/boolean/And.ts","../src/boolean/Or.ts","../src/boolean/Not.ts","../src/boolean/Bool.ts","../src/formats/FromJson.ts","../src/formats/ToJson.ts","../src/lists/First.ts"],"sourcesContent":["import { DataType, primitive } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/branch\n */\nexport const branch = <Then, Else>(\n  conditionSrc: DataType<boolean>,\n  leftSrc: DataType<Then>,\n  rightSrc?: DataType<Else>,\n): DataType<Then | Else> => {\n  return (u) => {\n    const leftSync = primitive(leftSrc);\n    let rightSync: ReturnType<typeof primitive<Else>>;\n\n    if (rightSrc !== undefined) {\n      rightSync = primitive(rightSrc);\n    }\n\n    conditionSrc((v) => {\n      let result: Then | Else | null = null;\n      if (v) {\n        result = leftSync.primitive();\n      } else if (rightSync) {\n        result = rightSync.primitive();\n      }\n\n      if (result !== null) {\n        u(result);\n      }\n    });\n  };\n};\n","import { DataType } from \"silentium\";\n\nexport const constant = <T>(\n  permanentValue: T,\n  triggerSrc: DataType,\n): DataType<T> => {\n  return (u) => {\n    triggerSrc(() => {\n      u(permanentValue);\n    });\n  };\n};\n","import { DataType, DataUserType, filtered, shared } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/path\n */\nexport const deadline = <T>(\n  error: DataUserType<Error>,\n  baseSrc: DataType<T>,\n  timeoutSrc: DataType<number>,\n): DataType<T> => {\n  return (u) => {\n    let timerHead: unknown = null;\n\n    const s = shared(baseSrc, true);\n\n    timeoutSrc((timeout) => {\n      if (timerHead) {\n        clearTimeout(timerHead as number);\n      }\n      let timeoutReached = false;\n\n      timerHead = setTimeout(() => {\n        if (timeoutReached) {\n          return;\n        }\n        timeoutReached = true;\n        error(new Error(\"Timeout reached in Deadline class\"));\n      }, timeout);\n\n      const f = filtered(s.value, () => !timeoutReached);\n      f(u);\n\n      s.value(() => {\n        timeoutReached = true;\n      });\n    });\n  };\n};\n","import { DataType, isFilled, primitive } from \"silentium\";\n\n/**\n * Defer one source after another, gives values of baseSrc only when triggerSrc responds\n * https://silentium-lab.github.io/silentium-components/#/behaviors/deferred\n */\nexport const deferred = <T>(\n  baseSrc: DataType<T>,\n  triggerSrc: DataType<unknown>,\n): DataType<T> => {\n  return (u) => {\n    const baseSync = primitive(baseSrc);\n    triggerSrc(() => {\n      const value = baseSync.primitive();\n      if (isFilled(value)) {\n        u(value);\n      }\n    });\n  };\n};\n","import { all, applied, DataType, late, SourceType } from \"silentium\";\n\n/**\n * Takes source and remember it first value\n * returns new record, what will contain only fields what was changed\n * https://silentium-lab.github.io/silentium-components/#/behaviors/dirty\n */\nexport const dirty = <T>(\n  baseEntitySource: DataType<T>,\n  alwaysKeep: string[] = [],\n  excludeKeys: string[] = [],\n  cloneFn?: (v: T) => T,\n): SourceType<T> => {\n  const comparingSrc = late<T>();\n\n  if (cloneFn === undefined) {\n    cloneFn = (value) => JSON.parse(JSON.stringify(value));\n  }\n\n  return {\n    value: (u) => {\n      const comparingDetached = applied(comparingSrc.value, cloneFn);\n\n      all(\n        comparingDetached,\n        baseEntitySource,\n      )(([comparing, base]) => {\n        if (!comparing) {\n          return;\n        }\n\n        u(\n          Object.fromEntries(\n            Object.entries(comparing).filter(([key, value]) => {\n              if (alwaysKeep.includes(key)) {\n                return true;\n              }\n              if (excludeKeys.includes(key)) {\n                return false;\n              }\n              return value !== (base as any)[key];\n            }),\n          ) as T,\n        );\n      });\n    },\n    give: (v) => {\n      comparingSrc.give(v);\n    },\n  };\n};\n","import { DataType } from \"silentium\";\n\n/**\n * Representation of loading process\n * first informatin source begins loading\n * second information source stops loading\n * https://silentium-lab.github.io/silentium-components/#/behaviors/loading\n */\nexport const loading = (\n  loadingStartSrc: DataType<unknown>,\n  loadingFinishSrc: DataType<unknown>,\n): DataType<boolean> => {\n  return (u) => {\n    loadingStartSrc(() => u(true));\n    loadingFinishSrc(() => u(false));\n  };\n};\n","import { DataType, filtered } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/lock\n */\nexport const lock = <T>(\n  baseSrc: DataType<T>,\n  lockSrc: DataType<boolean>,\n): DataType<T> => {\n  return (u) => {\n    let locked = false;\n    lockSrc((newLock) => {\n      locked = newLock;\n    });\n    const i = filtered(baseSrc, () => !locked);\n    i(u);\n  };\n};\n","import { DataType } from \"silentium\";\n\n/**\n * Didn't respond if new value of baseSrc equals to old value\n * https://silentium-lab.github.io/silentium-components/#/behaviors/memo\n */\nexport const memo = <T>(baseSrc: DataType<T>): DataType<T> => {\n  return (u) => {\n    let lastValue: T | null = null;\n\n    baseSrc((v) => {\n      if (v !== lastValue) {\n        u(v);\n        lastValue = v;\n      }\n    });\n  };\n};\n","import { DataType } from \"silentium\";\n\n/**\n * Represents source what was changed at least once\n * https://silentium-lab.github.io/silentium-components/#/behaviors/only-changed\n */\nexport const onlyChanged = <T>(baseSrc: DataType<T>): DataType<T> => {\n  return (u) => {\n    let firstValue = false;\n\n    baseSrc((v) => {\n      if (firstValue === false) {\n        firstValue = true;\n      } else {\n        u(v);\n      }\n    });\n  };\n};\n","import { all, DataType, isFilled, primitive, SourceType } from \"silentium\";\n\n/**\n * Return source of record path\n * https://silentium-lab.github.io/silentium-components/#/behaviors/path\n */\nexport const part = <\n  R,\n  T extends Record<string, unknown> | Array<unknown> = any,\n  K extends string = any,\n>(\n  baseSrc: SourceType<T>,\n  keySrc: DataType<K>,\n): SourceType<R> => {\n  const baseSync = primitive(baseSrc.value);\n  const keySync = primitive(keySrc);\n  return {\n    value: (u) => {\n      all(\n        baseSrc.value,\n        keySrc,\n      )(([base, key]) => {\n        const keyChunks = key.split(\".\");\n        let value: unknown = base;\n        keyChunks.forEach((keyChunk) => {\n          value = (value as Record<string, unknown>)[keyChunk];\n        });\n\n        if (value !== undefined && value !== base) {\n          u(value as R);\n        }\n      });\n    },\n    give: (value: R) => {\n      const key = keySync.primitive();\n      if (isFilled(key)) {\n        baseSrc.give({\n          ...baseSync.primitive(),\n          [key]: value,\n        } as T);\n      }\n    },\n  };\n};\n","import { all, DataType } from \"silentium\";\n\n/**\n * Return source of record path\n * https://silentium-lab.github.io/silentium-components/#/behaviors/path\n */\nexport const path = <\n  R,\n  T extends Record<string, unknown> | Array<unknown> = any,\n  K extends string = any,\n>(\n  baseSrc: DataType<T>,\n  keySrc: DataType<K>,\n): DataType<R> => {\n  return (u) => {\n    all(\n      baseSrc,\n      keySrc,\n    )(([base, key]) => {\n      const keyChunks = key.split(\".\");\n      let value: unknown = base;\n      keyChunks.forEach((keyChunk) => {\n        value = (value as Record<string, unknown>)[keyChunk];\n      });\n\n      if (value !== undefined && value !== base) {\n        u(value as R);\n      }\n    });\n  };\n};\n","import { DataType } from \"silentium\";\n\nexport const polling = <T>(\n  baseSrc: DataType<T>,\n  triggerSrc: DataType<T>,\n): DataType<T> => {\n  return (u) => {\n    triggerSrc(() => {\n      baseSrc(u);\n    });\n  };\n};\n","import { DataType, isFilled, primitive } from \"silentium\";\n\n/**\n * Helps to represent only last fresh value of some source, refreshing controls by shotSrc\n * https://silentium-lab.github.io/silentium-components/#/behaviors/shot\n */\nexport const shot = <T>(\n  targetSrc: DataType<T>,\n  triggerSrc: DataType,\n): DataType<T> => {\n  return (u) => {\n    const targetSync = primitive(targetSrc);\n\n    triggerSrc(() => {\n      const value = targetSync.primitive();\n      if (isFilled(value)) {\n        u(value);\n      }\n    });\n  };\n};\n","import { DataType } from \"silentium\";\n\n/**\n * Accumulates the last value of the source and returns one result once per tick\n * https://silentium-lab.github.io/silentium-components/#/behaviors/tick\n */\nexport const tick = <T>(baseSrc: DataType<T>): DataType<T> => {\n  return (u) => {\n    let microtaskScheduled = false;\n    let lastValue: T | null = null;\n\n    const scheduleMicrotask = () => {\n      microtaskScheduled = true;\n      queueMicrotask(() => {\n        microtaskScheduled = false;\n        if (lastValue !== null) {\n          u(lastValue);\n          lastValue = null;\n        }\n      });\n    };\n\n    baseSrc((v) => {\n      lastValue = v;\n      if (!microtaskScheduled) {\n        scheduleMicrotask();\n      }\n    });\n  };\n};\n","import { DataType, executorApplied } from \"silentium\";\n\nexport const task = <T>(\n  baseSrc: DataType<T>,\n  delay: number = 0,\n): DataType<T> => {\n  return (u) => {\n    let prevTimer: unknown | null = null;\n    executorApplied(baseSrc, (fn) => {\n      return (v) => {\n        if (prevTimer) {\n          clearTimeout(prevTimer as number);\n        }\n        prevTimer = setTimeout(() => {\n          fn(v);\n        }, delay);\n      };\n    })(u);\n  };\n};\n","import { DataType } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/structures/hash-table\n */\nexport const hashTable = <T>(\n  baseSrc: DataType<[string, unknown]>,\n): DataType<T> => {\n  return (u) => {\n    const record: Record<string, unknown> = {};\n\n    baseSrc(([key, value]) => {\n      record[key] = value;\n      u(record as T);\n    });\n  };\n};\n","import { all, DataType } from \"silentium\";\n\ntype UnInformation<T> = T extends DataType<infer U> ? U : never;\n\n/**\n * Returns record of data from record of sources\n * https://silentium-lab.github.io/silentium-components/#/structures/record\n */\nexport const recordOf = <T extends DataType>(\n  recordSrc: Record<string, T>,\n): DataType<Record<string, UnInformation<T>>> => {\n  return (u) => {\n    const keys = Object.keys(recordSrc);\n    all(...Object.values(recordSrc))((entries) => {\n      const record: Record<string, any> = {};\n      entries.forEach((entry, index) => {\n        record[keys[index]] = entry;\n      });\n      u(record);\n    });\n  };\n};\n","import { all, DataType, of } from \"silentium\";\n\n/**\n * Join sources of strings to one source\n * https://silentium-lab.github.io/silentium-components/#/string/concatenated\n */\nexport const concatenated = (\n  sources: DataType<string>[],\n  joinPartSrc: DataType<string> = of(\"\"),\n): DataType<string> => {\n  return (u) => {\n    all(\n      joinPartSrc,\n      ...sources,\n    )(([joinPart, ...strings]) => {\n      u(strings.join(joinPart));\n    });\n  };\n};\n","import {\n  all,\n  applied,\n  DataType,\n  destructor,\n  DestructorType,\n  of,\n} from \"silentium\";\nimport { recordOf } from \"../structures\";\n\nexport const template = (\n  theSrc: DataType<string> = of(\"\"),\n  placesSrc: DataType<Record<string, unknown>> = of({}),\n) => {\n  let placesCounter = 0;\n  const vars: Record<string, DataType> = {\n    $TPL: of(\"$TPL\"),\n  };\n  const destructors: DestructorType[] = [];\n  return {\n    value: <DataType<string>>((u) => {\n      const varsSrc = recordOf(vars);\n      applied(all(theSrc, placesSrc, varsSrc), ([base, rules, vars]) => {\n        Object.entries(rules).forEach(([ph, val]) => {\n          base = base.replaceAll(ph, String(val));\n        });\n        Object.entries(vars).forEach(([ph, val]) => {\n          base = base.replaceAll(ph, String(val));\n        });\n\n        return base;\n      })(u);\n    }),\n    template: (value: string) => {\n      theSrc = of(value);\n    },\n    /**\n     * Ability to register variable\n     * in concrete place of template\n     */\n    var: (src: DataType<string>) => {\n      const varName = `$var${placesCounter}`;\n      placesCounter += 1;\n      vars[varName] = destructor(src, (d: DestructorType) => {\n        destructors.push(d);\n      });\n      return varName;\n    },\n    destroy() {\n      destructors.forEach((d) => d());\n    },\n  };\n};\n","import { DataType, DestructorType, ValueType } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/branch\n */\nexport const branchLazy = <Then, Else>(\n  conditionSrc: DataType<boolean>,\n  leftSrc: ValueType<[], DataType<Then>>,\n  rightSrc?: ValueType<[], DataType<Else>>,\n): DataType<Then | Else> => {\n  return (u) => {\n    let destructor: DestructorType | void;\n    conditionSrc((v) => {\n      if (destructor !== undefined && typeof destructor === \"function\") {\n        destructor();\n      }\n      let instance: DataType<Then | Else> | null = null;\n      if (v) {\n        instance = leftSrc();\n      } else if (rightSrc) {\n        instance = rightSrc();\n      }\n      if (instance) {\n        destructor = instance(u);\n      }\n    });\n\n    return () => {\n      destructor?.();\n    };\n  };\n};\n","import { all, DataType, of } from \"silentium\";\n\n/**\n * Boolean source what checks what string matches pattern\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-matched\n */\nexport const regexpMatched = (\n  patternSrc: DataType<string>,\n  valueSrc: DataType<string>,\n  flagsSrc: DataType<string> = of(\"\"),\n): DataType<boolean> => {\n  return (u) => {\n    all(\n      patternSrc,\n      valueSrc,\n      flagsSrc,\n    )(([pattern, value, flags]) => {\n      u(new RegExp(pattern, flags).test(value));\n    });\n  };\n};\n","import { all, DataType, of } from \"silentium\";\n\n/**\n * Returns string replaced by regular expression pattern\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-replaced\n */\nexport const regexpReplaced = (\n  valueSrc: DataType<string>,\n  patternSrc: DataType<string>,\n  replaceValueSrc: DataType<string>,\n  flagsSrc: DataType<string> = of(\"\"),\n): DataType<string> => {\n  return (u) => {\n    all(\n      patternSrc,\n      valueSrc,\n      replaceValueSrc,\n      flagsSrc,\n    )(([pattern, value, replaceValue, flags]) => {\n      u(String(value).replace(new RegExp(pattern, flags), replaceValue));\n    });\n  };\n};\n","import { all, DataType, of } from \"silentium\";\n\n/**\n * First match of regexp\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-matched\n */\nexport const regexpMatch = (\n  patternSrc: DataType<string>,\n  valueSrc: DataType<string>,\n  flagsSrc: DataType<string> = of(\"\"),\n): DataType<string[]> => {\n  return (u) => {\n    all(\n      patternSrc,\n      valueSrc,\n      flagsSrc,\n    )(([pattern, value, flags]) => {\n      const result = new RegExp(pattern, flags).exec(value);\n      u(result ?? []);\n    });\n  };\n};\n","import { all, DataType } from \"silentium\";\n\n/**\n * Ability to mutate some object, helpful when integrate to procedure systems\n * https://silentium-lab.github.io/silentium-components/#/system/set\n */\nexport const set = <T extends Record<string, unknown>>(\n  baseSrc: DataType<T>,\n  keySrc: DataType<string>,\n  valueSrc: DataType<unknown>,\n): DataType<T> => {\n  return (u) => {\n    all(\n      baseSrc,\n      keySrc,\n      valueSrc,\n    )(([base, key, value]) => {\n      (base as Record<string, unknown>)[key] = value;\n      u(base);\n    });\n  };\n};\n","import {\n  all,\n  applied,\n  DataType,\n  destructor,\n  DestructorType,\n  of,\n  ValueType,\n} from \"silentium\";\nimport { branchLazy } from \"../behaviors/BranchLazy\";\nimport { regexpMatched } from \"../system\";\n\nexport interface Route<T> {\n  pattern: string;\n  patternFlags?: string;\n  template: ValueType<[], DataType<T>>;\n}\n\nconst emptySrc = () => of(false);\n\n/**\n * Router component what will return template if url matches pattern\n * https://silentium-lab.github.io/silentium-components/#/navigation/router\n */\nexport const router = <T = \"string\">(\n  urlSrc: DataType<string>,\n  routesSrc: DataType<Route<T>[]>,\n  defaultSrc: ValueType<[], DataType<T>>,\n): DataType<T> => {\n  return (u) => {\n    const destructors: DestructorType[] = [];\n    const destroyAllData = () => {\n      destructors.forEach((d) => d());\n    };\n    all(\n      routesSrc,\n      urlSrc,\n    )(([routes, url]) => {\n      destroyAllData();\n      const instance = all(\n        defaultSrc(),\n        all(\n          ...routes.map((r) =>\n            destructor(\n              branchLazy(\n                regexpMatched(\n                  of(r.pattern),\n                  of(url),\n                  r.patternFlags ? of(r.patternFlags) : undefined,\n                ),\n                r.template,\n                emptySrc,\n              ),\n              (d: DestructorType) => destructors.push(d),\n            ),\n          ),\n        ),\n      );\n\n      // Return first not false or default\n      applied(instance, (r) => {\n        const firstReal = r[1].find((r) => r !== false);\n\n        if (firstReal) {\n          return firstReal as T;\n        }\n\n        return r[0];\n      })(u);\n    });\n\n    return destroyAllData;\n  };\n};\n","import { all, DataType } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/boolean/and\n */\nexport const and = (\n  oneSrc: DataType<boolean>,\n  twoSrc: DataType<boolean>,\n): DataType<boolean> => {\n  return (u) => {\n    all(\n      oneSrc,\n      twoSrc,\n    )(([one, two]) => {\n      u(one && two);\n    });\n  };\n};\n","import { all, DataType } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/boolean/or\n */\nexport const or = (\n  oneSrc: DataType<boolean>,\n  twoSrc: DataType<boolean>,\n): DataType<boolean> => {\n  return (u) => {\n    all(\n      oneSrc,\n      twoSrc,\n    )(([one, two]) => {\n      u(one || two);\n    });\n  };\n};\n","import { DataType } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/boolean/not\n */\nexport const not = (baseSrc: DataType<boolean>): DataType<boolean> => {\n  return (u) => {\n    baseSrc((v) => {\n      u(!v);\n    });\n  };\n};\n","import { applied, DataType } from \"silentium\";\n\n/**\n * Convert any source to boolean source\n * https://silentium-lab.github.io/silentium-components/#/boolean/bool\n */\nexport const bool = (baseSrc: DataType): DataType<boolean> => {\n  return (u) => {\n    applied(baseSrc, Boolean)(u);\n  };\n};\n","import { DataType, DataUserType } from \"silentium\";\n\n/**\n * Represents object from json\n */\nexport const fromJson = <T = Record<string, unknown>>(\n  jsonSrc: DataType<string>,\n  errorOwner?: DataUserType,\n): DataType<T> => {\n  return (u) => {\n    jsonSrc((json) => {\n      try {\n        u(JSON.parse(json));\n      } catch (error) {\n        errorOwner?.(new Error(`Failed to parse JSON: ${error}`));\n      }\n    });\n  };\n};\n","import { DataType, DataUserType } from \"silentium\";\n\n/**\n * Represents json from object\n */\nexport const toJson = (\n  dataSrc: DataType,\n  errorOwner?: DataUserType,\n): DataType<string> => {\n  return (u) => {\n    dataSrc((data: unknown) => {\n      try {\n        u(JSON.stringify(data));\n      } catch {\n        errorOwner?.(new Error(\"Failed to convert to JSON\"));\n      }\n    });\n  };\n};\n","import { applied, DataType } from \"silentium\";\n\n/**\n * Represents the first element of an array.\n */\nexport const first = <T extends Array<unknown>>(\n  baseSrc: DataType<T>,\n): DataType<T[0]> => {\n  return (u) => {\n    applied(baseSrc, (a) => a[0])(u);\n  };\n};\n"],"names":["vars","r"],"mappings":"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"}