{"version":3,"file":"silentium-components.js","sources":["../src/controls/GroupActiveClass.ts","../src/behaviors/Dirty.ts","../src/behaviors/Loading.ts","../src/behaviors/Path.ts","../src/behaviors/Deadline.ts","../src/behaviors/Tick.ts","../src/behaviors/Fork.ts","../src/behaviors/Deferred.ts","../src/behaviors/Branch.ts","../src/behaviors/Memo.ts","../src/behaviors/Lock.ts","../src/behaviors/Moment.ts","../src/behaviors/Shot.ts","../src/behaviors/OnlyChanged.ts","../src/structures/HashTable.ts","../src/structures/Record.ts","../src/strings/Concatenated.ts","../src/behaviors/Survey.ts","../src/system/RegexpMatched.ts","../src/behaviors/Priority.ts","../src/navigation/Router.ts","../src/system/RegexpReplaced.ts","../src/system/RegexpMatch.ts","../src/system/Set.ts","../src/boolean/And.ts","../src/boolean/Or.ts","../src/boolean/Not.ts"],"sourcesContent":["import { sourceAll, SourceType, systemPatron, value } from \"silentium\";\n\n/**\n * Sets activeClass to one element of group\n * and resets activeClass on other group elements\n * suitable for menu active class\n */\nexport const groupActiveClass = (\n  activeClassSrc: SourceType<string>,\n  activeElementSrc: SourceType<HTMLElement>,\n  groupElementsSrc: SourceType<HTMLElement[]>,\n) => {\n  value(\n    sourceAll([activeClassSrc, activeElementSrc, groupElementsSrc]),\n    systemPatron(([activeClass, activeElement, groupElements]) => {\n      groupElements.forEach((el) => {\n        if (el.classList) {\n          el.classList.remove(activeClass);\n        }\n      });\n      activeElement.classList.add(activeClass);\n    }),\n  );\n\n  return groupElementsSrc;\n};\n","import {\n  give,\n  guestCast,\n  GuestType,\n  patronOnce,\n  sourceAll,\n  SourceChangeableType,\n  sourceOf,\n  SourceType,\n  value,\n} from \"silentium\";\n\n/**\n * Takes source and remember it first value\n * returns new record, what will contain only fields what was changed\n * https://silentium-lab.github.io/silentium-components/#/behaviors/dirty\n */\nexport const dirty = <T extends object>(\n  baseEntitySource: SourceType<T>,\n  becomePatronAuto = false,\n  alwaysKeep: string[] = [],\n  excludeKeys: string[] = [],\n): SourceChangeableType<Partial<T>> => {\n  const comparingSrc = sourceOf();\n  const all = sourceAll([comparingSrc, baseEntitySource]);\n\n  const result = {\n    give(value: T) {\n      give(JSON.parse(JSON.stringify(value)), comparingSrc);\n      return result;\n    },\n    value(guest: GuestType<Partial<T>>) {\n      value(\n        all,\n        guestCast(guest, ([comparing, base]) => {\n          if (!comparing) {\n            return;\n          }\n\n          give(\n            Object.fromEntries(\n              Object.entries(comparing).filter(([key, value]) => {\n                if (alwaysKeep.includes(key)) {\n                  return true;\n                }\n                if (excludeKeys.includes(key)) {\n                  return false;\n                }\n                return value !== (base as any)[key];\n              }),\n            ) as T,\n            guest,\n          );\n        }),\n      );\n      return result;\n    },\n  };\n\n  if (becomePatronAuto) {\n    value(baseEntitySource, patronOnce(result));\n  }\n\n  return result;\n};\n","import {\n  sourceOf,\n  SourceType,\n  subSourceMany,\n  systemPatron,\n  value,\n} from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/loading\n */\nexport const loading = (\n  loadingStartSource: SourceType<unknown>,\n  loadingFinishSource: SourceType<unknown>,\n) => {\n  const loadingSrc = sourceOf<boolean>();\n  subSourceMany(loadingSrc, [loadingStartSource, loadingFinishSource]);\n\n  value(\n    loadingStartSource,\n    systemPatron(() => {\n      loadingSrc.give(true);\n    }),\n  );\n  value(\n    loadingFinishSource,\n    systemPatron(() => {\n      loadingSrc.give(false);\n    }),\n  );\n\n  return loadingSrc.value;\n};\n","import {\n  give,\n  sourceAll,\n  sourceOf,\n  SourceType,\n  subSourceMany,\n  systemPatron,\n  value,\n} from \"silentium\";\n\n/**\n * Return source of record path\n * https://silentium-lab.github.io/silentium-components/#/behaviors/path\n */\nexport const path = <\n  T extends Record<string, unknown> | Array<unknown>,\n  K extends string,\n>(\n  baseSrc: SourceType<T>,\n  keySrc: SourceType<K>,\n) => {\n  const pathSrc = sourceOf<unknown>();\n  subSourceMany(pathSrc, [baseSrc, keySrc]);\n\n  value(\n    sourceAll([baseSrc, keySrc]),\n    systemPatron(([base, key]) => {\n      const keyChunks = key.split(\".\");\n      let value: unknown = base;\n      keyChunks.forEach((keyChunk) => {\n        value = (value as Record<string, unknown>)[keyChunk];\n      });\n\n      if (value !== undefined && value !== base) {\n        give(value, pathSrc);\n      }\n    }),\n  );\n\n  return pathSrc.value;\n};\n","import {\n  give,\n  guestCast,\n  GuestType,\n  patronOnce,\n  sourceFiltered,\n  SourceType,\n  value,\n} from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/path\n */\nexport const deadline = <T>(\n  error: GuestType<Error>,\n  baseSrc: SourceType<T>,\n  timeoutSrc: SourceType<number>,\n) => {\n  let timerHead: unknown = null;\n  return (g: GuestType<T>) => {\n    value(\n      timeoutSrc,\n      guestCast(g, (timeout) => {\n        if (timerHead) {\n          clearTimeout(timerHead as number);\n        }\n\n        let timeoutReached = false;\n\n        timerHead = setTimeout(() => {\n          if (timeoutReached) {\n            return;\n          }\n          timeoutReached = true;\n          give(new Error(\"Timeout reached in Deadline class\"), error);\n        }, timeout);\n\n        value(\n          sourceFiltered(baseSrc, () => !timeoutReached),\n          g,\n        );\n\n        value(\n          baseSrc,\n          patronOnce(() => {\n            timeoutReached = true;\n          }),\n        );\n      }),\n    );\n  };\n};\n","import {\n  give,\n  sourceOf,\n  SourceType,\n  subSource,\n  systemPatron,\n  value,\n} from \"silentium\";\n\n/**\n * Accumulates the last value of the source and returns one result once per tick\n * https://silentium-lab.github.io/silentium-components/#/behaviors/tick\n */\nexport const tick = <T>(baseSrc: SourceType<T>) => {\n  const result = sourceOf<T>();\n  subSource(result, baseSrc);\n\n  let microtaskScheduled = false;\n  let lastValue: T | null = null;\n\n  const scheduleMicrotask = () => {\n    microtaskScheduled = true;\n    queueMicrotask(() => {\n      microtaskScheduled = false;\n      if (lastValue !== null) {\n        give(lastValue, result);\n        lastValue = null;\n      }\n    });\n  };\n\n  value(\n    baseSrc,\n    systemPatron((v) => {\n      lastValue = v;\n      if (!microtaskScheduled) {\n        scheduleMicrotask();\n      }\n    }),\n  );\n\n  return result;\n};\n","import {\n  GuestObjectType,\n  patronOnce,\n  removePatronFromPools,\n  sourceOf,\n  sourceResettable,\n  SourceType,\n  systemPatron,\n  value,\n} from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/dirty\n */\nexport const fork = <T, Then, Else>(\n  conditionSrc: SourceType<T>,\n  predicate: (v: T) => boolean,\n  thenSrc: SourceType<Then>,\n  elseSrc?: SourceType<Else>,\n): SourceType<Then | Else> => {\n  const result = sourceOf<Then | Else>();\n  const reset = sourceOf();\n  const resultResettable = sourceResettable(result, reset);\n  let thenPatron: GuestObjectType<Then> | undefined;\n  let elsePatron: GuestObjectType<Else> | undefined;\n\n  value(\n    conditionSrc,\n    systemPatron((v) => {\n      reset.give(1);\n      if (thenPatron) {\n        removePatronFromPools(thenPatron);\n      }\n      if (elsePatron) {\n        removePatronFromPools(elsePatron);\n      }\n      if (predicate(v)) {\n        thenPatron = patronOnce(result);\n        value(thenSrc, thenPatron);\n      } else if (elseSrc) {\n        elsePatron = patronOnce(result);\n        value(elseSrc, elsePatron);\n      }\n    }),\n  );\n\n  return resultResettable;\n};\n","import {\n  firstVisit,\n  GuestType,\n  sourceOf,\n  sourceResettable,\n  SourceType,\n  systemPatron,\n  value,\n} from \"silentium\";\n\n/**\n * Defer one source after another, gives values of baseSrc only once when triggerSrc responds\n * https://silentium-lab.github.io/silentium-components/#/behaviors/deferred\n */\nexport const deferred = <T>(\n  baseSrc: SourceType<T>,\n  triggerSrc: SourceType<unknown>,\n) => {\n  const result = sourceResettable<T>(sourceOf(), baseSrc as SourceType);\n\n  const visited = firstVisit(() => {\n    value(\n      triggerSrc,\n      systemPatron(() => {\n        value(baseSrc, result);\n      }),\n    );\n  });\n\n  return (g: GuestType<T>) => {\n    visited();\n    value(result, g);\n  };\n};\n","import {\n  firstVisit,\n  GuestType,\n  sourceOf,\n  sourceResettable,\n  SourceType,\n  systemPatron,\n  value,\n} from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/branch\n */\nexport const branch = <Then, Else>(\n  conditionSrc: SourceType<boolean>,\n  thenSrc: SourceType<Then>,\n  elseSrc?: SourceType<Else>,\n): SourceType<Then | Else> => {\n  const resetSrc = sourceOf();\n  const result = sourceOf<Then | Else>();\n  const resultSrc = sourceResettable(result, resetSrc);\n\n  const visited = firstVisit(() => {\n    value(\n      conditionSrc,\n      systemPatron((v) => {\n        resetSrc.give(1);\n        if (v === true) {\n          value(thenSrc, result.give);\n        } else if (elseSrc !== undefined) {\n          value(elseSrc, result.give);\n        }\n      }),\n    );\n  });\n\n  return (g: GuestType<Then | Else>) => {\n    visited();\n    resultSrc.value(g);\n  };\n};\n","import { sourceOf, SourceType, systemPatron, value } from \"silentium\";\n\n/**\n * Didn't respond if new value of baseSrc equals to old value\n * https://silentium-lab.github.io/silentium-components/#/behaviors/memo\n */\nexport const memo = <T>(baseSrc: SourceType<T>) => {\n  const result = sourceOf<T>();\n  let lastValue: T | null = null;\n\n  value(\n    baseSrc,\n    systemPatron((v) => {\n      if (v !== lastValue) {\n        result.give(v);\n        lastValue = v;\n      }\n    }),\n  );\n\n  return result.value;\n};\n","import {\n  destroy,\n  guestDisposable,\n  patronOnce,\n  sourceOf,\n  sourceResettable,\n  SourceType,\n  subSource,\n  systemPatron,\n  value,\n} from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/behaviors/lock\n */\nexport const lock = <T>(\n  baseSrc: SourceType<T>,\n  lockSrc: SourceType<unknown>,\n) => {\n  const result = sourceOf();\n  const resultResettable = sourceResettable(result, lockSrc);\n  let locked = false;\n  subSource(result, baseSrc);\n\n  value(baseSrc, systemPatron(guestDisposable(result.give, () => locked)));\n\n  value(\n    lockSrc,\n    patronOnce(() => {\n      locked = true;\n      destroy([result]);\n    }),\n  );\n\n  return resultResettable;\n};\n","import { give, guestSync, GuestType, SourceType, value } from \"silentium\";\n\n/**\n * Get's value from source in moment of component call and than return this value every time\n * https://silentium-lab.github.io/silentium-components/#/behaviors/moment\n */\nexport const moment = <T>(\n  baseSrc: SourceType<T>,\n  defaultValue?: T,\n): SourceType<T> => {\n  const guest = guestSync(defaultValue);\n  value(baseSrc, guest);\n\n  return (g: GuestType<T>) => {\n    give(guest.value(), g);\n  };\n};\n","import {\n  sourceOf,\n  sourceResettable,\n  sourceSync,\n  SourceType,\n  systemPatron,\n  value,\n} from \"silentium\";\n\n/**\n * Helps to represent only last fresh value of some source, refreshing controls by shotSrc\n * https://silentium-lab.github.io/silentium-components/#/behaviors/shot\n */\nexport const shot = <T>(baseSrc: SourceType<T>, shotSrc: SourceType) => {\n  const resetResult = sourceOf();\n  const result = sourceOf<T>();\n\n  const baseSrcSync = sourceSync(baseSrc, null);\n  value(\n    shotSrc,\n    systemPatron(() => {\n      if (baseSrcSync.syncValue() !== null) {\n        result.give(baseSrcSync.syncValue() as T);\n        resetResult.give(1);\n      }\n    }),\n  );\n\n  return sourceResettable(result, resetResult);\n};\n","import { give, guestCast, source, SourceType, value } from \"silentium\";\n\n/**\n * Represents source what was changed at least once\n * https://silentium-lab.github.io/silentium-components/#/behaviors/only-changed\n */\nexport const onlyChanged = <T>(baseSrc: SourceType<T>) => {\n  let firstValue = false;\n  return source<T>((g) => {\n    value(\n      baseSrc,\n      guestCast<T>(g, (v) => {\n        if (firstValue === false) {\n          firstValue = true;\n        } else {\n          give(v, g);\n        }\n      }),\n    );\n  });\n};\n","import {\n  sourceOf,\n  SourceType,\n  subSource,\n  systemPatron,\n  value,\n} from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/structures/hash-table\n */\nexport const hashTable = (baseSource: SourceType<[string, unknown]>) => {\n  const result = sourceOf<Record<string, unknown>>({});\n  subSource(result, baseSource);\n\n  value(\n    baseSource,\n    systemPatron(([key, value]) => {\n      result.value((lastRecord) => {\n        lastRecord[key] = value;\n      });\n    }),\n  );\n\n  return result.value;\n};\n","import { give, GuestType, sourceCombined, SourceType } from \"silentium\";\n\n/**\n * Returns record of data from record of sources\n * https://silentium-lab.github.io/silentium-components/#/structures/record\n */\nexport const record = (recordSrc: Record<string, SourceType>) => {\n  const keys = Object.keys(recordSrc);\n  return sourceCombined(...Object.values(recordSrc))(\n    (g: GuestType<Record<string, any>>, ...entries: any[]) => {\n      const record: Record<string, any> = {};\n      entries.forEach((entry, index) => {\n        record[keys[index]] = entry;\n      });\n      give(record, g);\n    },\n  );\n};\n","import { give, GuestType, sourceCombined, SourceType } from \"silentium\";\n\n/**\n * Join sources of strings to one source\n * https://silentium-lab.github.io/silentium-components/#/string/concatenated\n */\nexport const concatenated = (\n  sources: SourceType<string>[],\n  joinPartSrc: SourceType<string> = \"\",\n): SourceType<string> => {\n  const result = sourceCombined(\n    joinPartSrc,\n    ...sources,\n  )((g: GuestType<string>, joinPart, ...strings) => {\n    give(strings.join(joinPart), g);\n  });\n\n  return result;\n};\n","import {\n  firstVisit,\n  GuestType,\n  sourceOf,\n  SourceType,\n  systemPatron,\n  value,\n} from \"silentium\";\n\nexport const survey = <T>(\n  targetSrc: SourceType<T>,\n  triggerSrc: SourceType,\n): SourceType<T> => {\n  const resultSrc = sourceOf<T>();\n\n  const visited = firstVisit(() => {\n    value(\n      triggerSrc,\n      systemPatron(() => {\n        value(targetSrc, resultSrc);\n      }),\n    );\n  });\n\n  return (g: GuestType<T>) => {\n    visited();\n    resultSrc.value(g);\n  };\n};\n","import { give, GuestType, sourceCombined, SourceType } from \"silentium\";\n\n/**\n * Boolean source what checks what string matches pattern\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-matched\n */\nexport const regexpMatched = (\n  patternSrc: SourceType<string>,\n  valueSrc: SourceType<string>,\n  flagsSrc: SourceType<string> = \"\",\n): SourceType<boolean> =>\n  sourceCombined(\n    patternSrc,\n    valueSrc,\n    flagsSrc,\n  )((g: GuestType<boolean>, pattern, value, flags) => {\n    give(new RegExp(pattern, flags).test(value), g);\n  });\n","import { give, GuestType, SourceType, value } from \"silentium\";\n\nexport const priority = <T>(sources: SourceType<T>[]) => {\n  return (g: GuestType<T>) => {\n    let highestPriorityIndex = 0;\n    let highestPriorityResult;\n    sources.forEach((source, index) => {\n      value(source, (v) => {\n        if (highestPriorityIndex <= index) {\n          highestPriorityIndex = index;\n          highestPriorityResult = v;\n        }\n      });\n    });\n\n    if (highestPriorityResult !== undefined) {\n      give(highestPriorityResult, g);\n    }\n  };\n};\n","import {\n  firstVisit,\n  GuestType,\n  patron,\n  patronOnce,\n  sourceOf,\n  SourceType,\n  systemPatron,\n  value,\n} from \"silentium\";\nimport { survey } from \"../behaviors/Survey\";\nimport { branch } from \"../behaviors\";\nimport { regexpMatched } from \"../system/RegexpMatched\";\nimport { priority } from \"../behaviors/Priority\";\n\nexport interface Route<T> {\n  pattern: string;\n  patternFlags?: string;\n  template: T | SourceType<T>;\n}\n\n/**\n * Router component what will return template if url matches pattern\n * https://silentium-lab.github.io/silentium-components/#/navigation/router\n */\nexport const router = <T = \"string\">(\n  urlSrc: SourceType<string>,\n  routesSrc: SourceType<Route<T>[]>,\n  defaultSrc: SourceType<T>,\n) => {\n  const resultSrc = sourceOf<T>();\n\n  const visited = firstVisit(() => {\n    value(\n      routesSrc,\n      patronOnce((routes) => {\n        const prioritySrc = priority([\n          defaultSrc,\n          ...routes.map((r) =>\n            value(\n              branch(\n                regexpMatched(r.pattern, urlSrc, r.patternFlags),\n                r.template as SourceType,\n              ),\n              systemPatron((v) => {\n                return v;\n              }),\n            ),\n          ),\n        ]);\n        const surveySrc = survey(prioritySrc, urlSrc);\n        value(surveySrc, patron(resultSrc));\n        value(\n          surveySrc,\n          patron((v) => {\n            return v;\n          }),\n        );\n      }),\n    );\n  });\n\n  return (g: GuestType<T>) => {\n    visited();\n    resultSrc.value(g);\n  };\n};\n","import { give, GuestType, sourceCombined, SourceType } from \"silentium\";\n\n/**\n * Returns string replaced by regular expression pattern\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-replaced\n */\nexport const regexpReplaced = (\n  valueSrc: SourceType<string>,\n  patternSrc: SourceType<string>,\n  replaceValueSrc: SourceType<string>,\n  flagsSrc: SourceType<string> = \"\",\n): SourceType<string> =>\n  sourceCombined(\n    patternSrc,\n    valueSrc,\n    replaceValueSrc,\n    flagsSrc,\n  )((g: GuestType<string>, pattern, value, replaceValue, flags) => {\n    give(String(value).replace(new RegExp(pattern, flags), replaceValue), g);\n  });\n","import { give, GuestType, sourceCombined, SourceType } from \"silentium\";\n\n/**\n * First match of regexp\n * https://silentium-lab.github.io/silentium-components/#/system/regexp-matched\n */\nexport const regexpMatch = (\n  patternSrc: SourceType<string>,\n  valueSrc: SourceType<string>,\n  flagsSrc: SourceType<string> = \"\",\n): SourceType<string[]> =>\n  sourceCombined(\n    patternSrc,\n    valueSrc,\n    flagsSrc,\n  )((g: GuestType<string[]>, pattern, value, flags) => {\n    const result = new RegExp(pattern, flags).exec(value);\n    give(result ?? [], g);\n  });\n","import { sourceAll, SourceType, systemPatron, value } from \"silentium\";\n\n/**\n * Ability to mutate some object, helpful when integrate to procedure systems\n * https://silentium-lab.github.io/silentium-components/#/system/set\n */\nexport const set = <T extends Record<string, unknown>>(\n  baseSrc: SourceType<T>,\n  keySrc: SourceType<string>,\n  valueSrc: SourceType<unknown>,\n) => {\n  value(\n    sourceAll([baseSrc, keySrc, valueSrc]),\n    systemPatron(([base, key, value]) => {\n      (base as Record<string, unknown>)[key] = value;\n    }),\n  );\n\n  return baseSrc;\n};\n","import { give, GuestType, sourceCombined, SourceType } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/boolean/and\n */\nexport const and = (\n  oneSrc: SourceType<boolean>,\n  twoSrc: SourceType<boolean>,\n) => {\n  return sourceCombined(\n    oneSrc,\n    twoSrc,\n  )((guest: GuestType<boolean>, one, two) => {\n    give(one && two, guest);\n  });\n};\n","import { give, GuestType, sourceCombined, SourceType } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/boolean/or\n */\nexport const or = (\n  oneSrc: SourceType<boolean>,\n  twoSrc: SourceType<boolean>,\n) => {\n  return sourceCombined(\n    oneSrc,\n    twoSrc,\n  )((guest: GuestType<boolean>, one, two) => {\n    give(one || two, guest);\n  });\n};\n","import { give, guestCast, GuestType, SourceType, value } from \"silentium\";\n\n/**\n * https://silentium-lab.github.io/silentium-components/#/boolean/not\n */\nexport const not = (baseSrc: SourceType<boolean>) => {\n  return (g: GuestType<boolean>) => {\n    value(\n      baseSrc,\n      guestCast(g, (base) => {\n        give(!base, g);\n      }),\n    );\n  };\n};\n"],"names":["value","record"],"mappings":"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"}